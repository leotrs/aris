name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Unit Tests and Linting (Parallel)
  backend-test:
    runs-on: ubuntu-latest
    env:
      ENV: CI
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD || 'testpassword123' }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aris
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5432:5432

    defaults:
      run:
        working-directory: backend

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.13

    - name: Create virtual environment and sync dependencies
      run: |
        uv venv
        uv sync --group test --group dev

    - name: Run linting (ruff)
      run: uv run ruff check

    - name: Wait for PostgreSQL to be ready
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
        echo "PostgreSQL is ready!"


    - name: Run tests
      env:
        DB_URL_LOCAL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
        DB_URL_PROD: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
        ALEMBIC_DB_URL_LOCAL: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
        ALEMBIC_DB_URL_PROD: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
        JWT_SECRET_KEY: test_secret_key_for_ci_environment_32_chars_minimum
        TEST_USER_EMAIL: testuser@aris.pub
        TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
        ENV: CI
      run: uv run pytest -n4 --cov=aris --cov-report=xml --tb=short

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: ./backend/coverage.xml
        flags: backend
        token: ${{ secrets.CODECOV_TOKEN }}

  frontend-test:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: frontend

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Check for missing packages
      run: npm ls --depth=0

    - name: Run linting
      run: npm run lint

    - name: Run tests
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: ./frontend/coverage/lcov.info
        flags: frontend
        token: ${{ secrets.CODECOV_TOKEN }}

  site-test:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: site

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: site/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Check for missing packages
      run: npm ls --depth=0

    - name: Run linting
      run: npm run lint

    - name: Run unit tests
      run: npm run test:run

  # E2E Tests with Auth
  e2e-auth:
    needs: [backend-test, frontend-test, site-test]
    runs-on: ubuntu-latest
    env:
      ENV: PROD
      DB_URL_LOCAL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
      DB_URL_PROD: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
      ALEMBIC_DB_URL_LOCAL: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
      ALEMBIC_DB_URL_PROD: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
      JWT_SECRET_KEY: test_secret_key_for_ci_environment_32_chars_minimum
      TEST_USER_EMAIL: testuser@aris.pub
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      VITE_LOG_LEVEL: WARN

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aris
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.13

    - name: Create virtual environment and sync dependencies
      working-directory: backend
      run: |
        uv venv
        uv sync --group test --group dev

    - name: Wait for PostgreSQL to be ready
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
        echo "PostgreSQL is ready!"

    - name: Run database migrations and create test user
      working-directory: backend
      run: |
        uv run alembic upgrade head
        uv run python scripts/reset_test_user.py

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: playwright-browsers-${{ runner.os }}-chromium-firefox

    - name: Install Playwright browsers (Ubuntu compatible)
      working-directory: frontend
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install chromium firefox --with-deps

    - name: Start frontend and run auth-required E2E tests with backend running
      env:
        VITE_API_BASE_URL: http://localhost:8000
        TEST_USER_EMAIL: testuser@aris.pub
        TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
        ENV: PROD
        DB_URL_LOCAL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
        DB_URL_PROD: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
        ALEMBIC_DB_URL_LOCAL: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
        ALEMBIC_DB_URL_PROD: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
        JWT_SECRET_KEY: test_secret_key_for_ci_environment_32_chars_minimum
      run: |
        # Start backend first
        echo "Starting backend for auth-required E2E tests..."
        cd backend
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 &
        BACKEND_PID=$!
        echo "Backend started with PID: $BACKEND_PID"
        
        # Wait for backend
        sleep 8
        for i in {1..5}; do
          if curl -f http://localhost:8000/health; then
            echo "Backend ready for auth E2E tests"
            break
          else
            echo "Waiting for backend... ($i/5)"
            if [ $i -eq 5 ]; then
              echo "Backend failed to start for auth E2E tests"
              kill $BACKEND_PID 2>/dev/null || true
              exit 1
            fi
            sleep 2
          fi
        done
        
        # Test /render endpoint before starting frontend
        echo "Verifying /render endpoint works..."
        RENDER_TEST=$(curl -s -w "%{http_code}" -X POST -H "Content-Type: application/json" -d '{"source": ":rsm:\n# Test\n::"}' http://localhost:8000/render)
        if echo "$RENDER_TEST" | grep -q "200$"; then
          echo "✅ /render endpoint confirmed working"
        else
          echo "❌ /render endpoint not working: $RENDER_TEST"
          kill $BACKEND_PID 2>/dev/null || true
          exit 1
        fi
        
        # Start frontend
        cd ../frontend
        npm run dev &
        FRONTEND_PID=$!
        echo "Frontend started with PID: $FRONTEND_PID"
        
        # Wait for frontend
        sleep 15
        
        # Run tests with both backend and frontend running
        echo "Running auth-required E2E tests with backend PID $BACKEND_PID and frontend PID $FRONTEND_PID"
        npx playwright test --grep "@auth[^-]" --project=chromium --project=firefox --project="Mobile Chrome" --reporter=github
        TEST_EXIT_CODE=$?
        
        # Cleanup both processes
        echo "Cleaning up processes..."
        kill $FRONTEND_PID 2>/dev/null || true
        kill $BACKEND_PID 2>/dev/null || true
        exit $TEST_EXIT_CODE

  # E2E Tests - Authentication Flows
  e2e-auth-flows:
    needs: [backend-test, frontend-test, site-test]
    runs-on: ubuntu-latest
    env:
      ENV: CI
      DB_URL_LOCAL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
      DB_URL_PROD: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
      ALEMBIC_DB_URL_LOCAL: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
      ALEMBIC_DB_URL_PROD: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
      JWT_SECRET_KEY: test_secret_key_for_ci_environment_32_chars_minimum
      TEST_USER_EMAIL: testuser@aris.pub
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      VITE_LOG_LEVEL: WARN

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aris
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true
    - name: Set up Python
      run: uv python install 3.13
    - name: Create virtual environment and sync dependencies
      working-directory: backend
      run: |
        uv venv
        uv sync --group test --group dev
    - name: Wait for PostgreSQL to be ready
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
        echo "PostgreSQL is ready!"
    - name: Run database migrations and create test user
      working-directory: backend
      run: |
        uv run alembic upgrade head
        uv run python scripts/reset_test_user.py
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: playwright-browsers-${{ runner.os }}-chromium-firefox
    - name: Install Playwright browsers (Ubuntu compatible)
      working-directory: frontend
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install chromium firefox --with-deps
    - name: Start frontend and run auth-flow E2E tests
      env:
        VITE_API_BASE_URL: http://localhost:8000
        TEST_USER_EMAIL: testuser@aris.pub
        TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
        ENV: CI
        DB_URL_LOCAL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
        DB_URL_PROD: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
        ALEMBIC_DB_URL_LOCAL: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
        ALEMBIC_DB_URL_PROD: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
        JWT_SECRET_KEY: test_secret_key_for_ci_environment_32_chars_minimum
      run: |
        # Start backend first
        echo "Starting backend for auth-flows E2E tests..."
        cd backend
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 &
        BACKEND_PID=$!
        echo "Backend started with PID: $BACKEND_PID"
        
        # Wait for backend
        sleep 8
        for i in {1..5}; do
          if curl -f http://localhost:8000/health; then
            echo "Backend ready for auth-flows E2E tests"
            break
          else
            echo "Waiting for backend... ($i/5)"
            if [ $i -eq 5 ]; then
              echo "Backend failed to start for auth-flows E2E tests"
              kill $BACKEND_PID 2>/dev/null || true
              exit 1
            fi
            sleep 2
          fi
        done
        
        # Start frontend
        cd ../frontend
        npm run dev &
        FRONTEND_PID=$!
        echo "Frontend started with PID: $FRONTEND_PID"
        
        # Wait for frontend
        sleep 15
        
        # Run tests with both backend and frontend running
        echo "Running auth-flows E2E tests with backend PID $BACKEND_PID and frontend PID $FRONTEND_PID"
        npx playwright test --grep "@auth-flows" --project=chromium --project=firefox --project="Mobile Chrome" --reporter=github
        TEST_EXIT_CODE=$?
        
        # Cleanup both processes
        echo "Cleaning up processes..."
        kill $FRONTEND_PID 2>/dev/null || true
        kill $BACKEND_PID 2>/dev/null || true
        exit $TEST_EXIT_CODE

  # E2E Tests - Demo Content & Navigation
  e2e-demo-content:
    needs: [backend-test, frontend-test, site-test]
    runs-on: ubuntu-latest
    env:
      ENV: CI
      DISABLE_AUTH: true
      DB_URL_LOCAL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
      DB_URL_PROD: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
      ALEMBIC_DB_URL_LOCAL: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
      ALEMBIC_DB_URL_PROD: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
      JWT_SECRET_KEY: test_secret_key_for_ci_environment_32_chars_minimum
      TEST_USER_EMAIL: testuser@aris.pub
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      VITE_LOG_LEVEL: WARN

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aris
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true
    - name: Set up Python
      run: uv python install 3.13
    - name: Create virtual environment and sync dependencies
      working-directory: backend
      run: |
        uv venv
        uv sync --group test --group dev
    - name: Wait for PostgreSQL to be ready
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
        echo "PostgreSQL is ready!"
    - name: Run database migrations
      working-directory: backend
      run: uv run alembic upgrade head
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: playwright-browsers-${{ runner.os }}-chromium-firefox
    - name: Install Playwright browsers (Ubuntu compatible)
      working-directory: frontend
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install chromium firefox --with-deps
    - name: Start frontend and run demo content E2E tests
      env:
        VITE_API_BASE_URL: http://localhost:8000
        VITE_DISABLE_AUTH: true
        TEST_USER_EMAIL: testuser@aris.pub
        TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
        ENV: CI
        DISABLE_AUTH: true
        DB_URL_LOCAL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
        DB_URL_PROD: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
        ALEMBIC_DB_URL_LOCAL: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
        ALEMBIC_DB_URL_PROD: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
        JWT_SECRET_KEY: test_secret_key_for_ci_environment_32_chars_minimum
      run: |
        # Start backend first
        echo "Starting backend for demo content E2E tests..."
        cd backend
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 &
        BACKEND_PID=$!
        echo "Backend started with PID: $BACKEND_PID"
        
        # Wait for backend
        sleep 8
        for i in {1..5}; do
          if curl -f http://localhost:8000/health; then
            echo "Backend ready for demo content E2E tests"
            break
          else
            echo "Waiting for backend... ($i/5)"
            if [ $i -eq 5 ]; then
              echo "Backend failed to start for demo content E2E tests"
              kill $BACKEND_PID 2>/dev/null || true
              exit 1
            fi
            sleep 2
          fi
        done
        
        # Start frontend
        cd ../frontend
        npm run dev &
        FRONTEND_PID=$!
        echo "Frontend started with PID: $FRONTEND_PID"
        
        # Wait for frontend
        sleep 15
        
        # Run tests with both backend and frontend running
        echo "Running demo content E2E tests with backend PID $BACKEND_PID and frontend PID $FRONTEND_PID"
        npx playwright test --grep "@demo-content" --project=chromium --project=firefox --project="Mobile Chrome" --reporter=github
        TEST_EXIT_CODE=$?
        
        # Cleanup both processes
        echo "Cleaning up processes..."
        kill $FRONTEND_PID 2>/dev/null || true
        kill $BACKEND_PID 2>/dev/null || true
        exit $TEST_EXIT_CODE

  # E2E Tests - Demo UI & Workspace
  e2e-demo-ui:
    needs: [backend-test, frontend-test, site-test]
    runs-on: ubuntu-latest
    env:
      ENV: CI
      DISABLE_AUTH: true
      DB_URL_LOCAL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
      DB_URL_PROD: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
      ALEMBIC_DB_URL_LOCAL: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
      ALEMBIC_DB_URL_PROD: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
      JWT_SECRET_KEY: test_secret_key_for_ci_environment_32_chars_minimum
      TEST_USER_EMAIL: testuser@aris.pub
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      VITE_LOG_LEVEL: WARN

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aris
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true
    - name: Set up Python
      run: uv python install 3.13
    - name: Create virtual environment and sync dependencies
      working-directory: backend
      run: |
        uv venv
        uv sync --group test --group dev
    - name: Wait for PostgreSQL to be ready
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
        echo "PostgreSQL is ready!"
    - name: Run database migrations
      working-directory: backend
      run: uv run alembic upgrade head
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: playwright-browsers-${{ runner.os }}-chromium-firefox
    - name: Install Playwright browsers (Ubuntu compatible)
      working-directory: frontend
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install chromium firefox --with-deps
    - name: Start frontend and run demo UI E2E tests
      env:
        VITE_API_BASE_URL: http://localhost:8000
        VITE_DISABLE_AUTH: true
        TEST_USER_EMAIL: testuser@aris.pub
        TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
        ENV: CI
        DISABLE_AUTH: true
        DB_URL_LOCAL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
        DB_URL_PROD: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
        ALEMBIC_DB_URL_LOCAL: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
        ALEMBIC_DB_URL_PROD: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
        JWT_SECRET_KEY: test_secret_key_for_ci_environment_32_chars_minimum
      run: |
        # Start backend first
        echo "Starting backend for demo UI E2E tests..."
        cd backend
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 &
        BACKEND_PID=$!
        echo "Backend started with PID: $BACKEND_PID"
        
        # Wait for backend
        sleep 8
        for i in {1..5}; do
          if curl -f http://localhost:8000/health; then
            echo "Backend ready for demo UI E2E tests"
            break
          else
            echo "Waiting for backend... ($i/5)"
            if [ $i -eq 5 ]; then
              echo "Backend failed to start for demo UI E2E tests"
              kill $BACKEND_PID 2>/dev/null || true
              exit 1
            fi
            sleep 2
          fi
        done
        
        # Start frontend
        cd ../frontend
        npm run dev &
        FRONTEND_PID=$!
        echo "Frontend started with PID: $FRONTEND_PID"
        
        # Wait for frontend
        sleep 15
        
        # Run tests with both backend and frontend running
        echo "Running demo UI E2E tests with backend PID $BACKEND_PID and frontend PID $FRONTEND_PID"
        npx playwright test --grep "@demo-ui" --project=chromium --project=firefox --project="Mobile Chrome" --reporter=github
        TEST_EXIT_CODE=$?
        
        # Cleanup both processes
        echo "Cleaning up processes..."
        kill $FRONTEND_PID 2>/dev/null || true
        kill $BACKEND_PID 2>/dev/null || true
        exit $TEST_EXIT_CODE

  # E2E Tests - Core Functionality
  e2e-core:
    needs: [backend-test, frontend-test, site-test]
    runs-on: ubuntu-latest
    env:
      ENV: CI
      DISABLE_AUTH: true
      DB_URL_LOCAL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
      DB_URL_PROD: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
      ALEMBIC_DB_URL_LOCAL: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
      ALEMBIC_DB_URL_PROD: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
      JWT_SECRET_KEY: test_secret_key_for_ci_environment_32_chars_minimum
      TEST_USER_EMAIL: testuser@aris.pub
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      VITE_LOG_LEVEL: WARN

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aris
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true
    - name: Set up Python
      run: uv python install 3.13
    - name: Create virtual environment and sync dependencies
      working-directory: backend
      run: |
        uv venv
        uv sync --group test --group dev
    - name: Wait for PostgreSQL to be ready
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
        echo "PostgreSQL is ready!"
    - name: Run database migrations
      working-directory: backend
      run: uv run alembic upgrade head
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: playwright-browsers-${{ runner.os }}-chromium-firefox
    - name: Install Playwright browsers (Ubuntu compatible)
      working-directory: frontend
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install chromium firefox --with-deps
    - name: Start frontend and run core E2E tests
      env:
        VITE_API_BASE_URL: http://localhost:8000
        VITE_DISABLE_AUTH: true
        TEST_USER_EMAIL: testuser@aris.pub
        TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
        ENV: CI
        DISABLE_AUTH: true
        DB_URL_LOCAL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
        DB_URL_PROD: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
        ALEMBIC_DB_URL_LOCAL: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
        ALEMBIC_DB_URL_PROD: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
        JWT_SECRET_KEY: test_secret_key_for_ci_environment_32_chars_minimum
      run: |
        # Start backend first
        echo "Starting backend for core E2E tests..."
        cd backend
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 &
        BACKEND_PID=$!
        echo "Backend started with PID: $BACKEND_PID"
        
        # Wait for backend
        sleep 8
        for i in {1..5}; do
          if curl -f http://localhost:8000/health; then
            echo "Backend ready for core E2E tests"
            break
          else
            echo "Waiting for backend... ($i/5)"
            if [ $i -eq 5 ]; then
              echo "Backend failed to start for core E2E tests"
              kill $BACKEND_PID 2>/dev/null || true
              exit 1
            fi
            sleep 2
          fi
        done
        
        # Start frontend
        cd ../frontend
        npm run dev &
        FRONTEND_PID=$!
        echo "Frontend started with PID: $FRONTEND_PID"
        
        # Wait for frontend
        sleep 15
        
        # Run tests with both backend and frontend running
        echo "Running core E2E tests with backend PID $BACKEND_PID and frontend PID $FRONTEND_PID"
        npx playwright test --grep "@core" --project=chromium --project=firefox --project="Mobile Chrome" --reporter=github
        TEST_EXIT_CODE=$?
        
        # Cleanup both processes
        echo "Cleaning up processes..."
        kill $FRONTEND_PID 2>/dev/null || true
        kill $BACKEND_PID 2>/dev/null || true
        exit $TEST_EXIT_CODE

  # macOS E2E Tests for WebKit/Safari
  e2e-webkit-auth:
    needs: [backend-test, frontend-test, site-test]
    runs-on: macos-latest
    env:
      ENV: PROD
      JWT_SECRET_KEY: test_secret_key_for_ci_environment_32_chars_minimum
      TEST_USER_EMAIL: testuser@aris.pub
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      VITE_LOG_LEVEL: WARN

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/Library/Caches/ms-playwright
        key: playwright-browsers-${{ runner.os }}-webkit

    - name: Install Playwright webkit browser
      working-directory: frontend
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install webkit

    - name: Install Python (for backend)
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install uv
      run: pip install uv

    - name: Setup PostgreSQL
      run: |
        brew install postgresql
        brew services start postgresql
        # Wait for PostgreSQL to be ready
        for i in {1..30}; do
          if pg_isready -q; then
            echo "PostgreSQL is ready!"
            break
          else
            echo "Waiting for PostgreSQL to start... ($i/30)"
            if [ $i -eq 30 ]; then
              echo "PostgreSQL failed to start"
              exit 1
            fi
            sleep 2
          fi
        done
        createdb test_aris

    - name: Create virtual environment and sync dependencies
      working-directory: backend
      run: |
        uv venv
        uv sync --group test --group dev

    - name: Run database migrations and create test user
      working-directory: backend
      env:
        DB_URL_LOCAL: postgresql+asyncpg://localhost:5432/test_aris
        DB_URL_PROD: postgresql+asyncpg://localhost:5432/test_aris
        ALEMBIC_DB_URL_LOCAL: postgresql+psycopg2://localhost:5432/test_aris
        ALEMBIC_DB_URL_PROD: postgresql+psycopg2://localhost:5432/test_aris
      run: |
        uv run alembic upgrade head
        uv run python scripts/reset_test_user.py

    - name: Start frontend and run webkit auth E2E tests
      env:
        VITE_API_BASE_URL: http://localhost:8000
        TEST_USER_EMAIL: testuser@aris.pub
        TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
        ENV: PROD
        DB_URL_LOCAL: postgresql+asyncpg://localhost:5432/test_aris
        DB_URL_PROD: postgresql+asyncpg://localhost:5432/test_aris
        ALEMBIC_DB_URL_LOCAL: postgresql+psycopg2://localhost:5432/test_aris
        ALEMBIC_DB_URL_PROD: postgresql+psycopg2://localhost:5432/test_aris
        JWT_SECRET_KEY: test_secret_key_for_ci_environment_32_chars_minimum
      run: |
        # Start backend
        echo "Starting backend for webkit auth E2E tests..."
        cd backend
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 &
        BACKEND_PID=$!
        echo "Backend started with PID: $BACKEND_PID"
        
        # Wait for backend
        sleep 8
        for i in {1..5}; do
          if curl -f http://localhost:8000/health; then
            echo "Backend ready for webkit auth E2E tests"
            break
          else
            echo "Waiting for backend... ($i/5)"
            if [ $i -eq 5 ]; then
              echo "Backend failed to start for webkit auth E2E tests"
              kill $BACKEND_PID 2>/dev/null || true
              exit 1
            fi
            sleep 2
          fi
        done
        
        # Start frontend
        cd ../frontend
        npm run dev &
        FRONTEND_PID=$!
        echo "Frontend started with PID: $FRONTEND_PID"
        
        # Wait for frontend
        sleep 15
        
        # Run webkit/Safari tests only
        echo "Running webkit auth E2E tests with backend PID $BACKEND_PID and frontend PID $FRONTEND_PID"
        npx playwright test --grep "@auth[^-]" --project=webkit --project="Mobile Safari" --reporter=github
        TEST_EXIT_CODE=$?
        
        # Cleanup both processes
        echo "Cleaning up processes..."
        kill $FRONTEND_PID 2>/dev/null || true
        kill $BACKEND_PID 2>/dev/null || true
        exit $TEST_EXIT_CODE

  e2e-webkit-core:
    needs: [backend-test, frontend-test, site-test]
    runs-on: macos-latest
    env:
      ENV: CI
      DISABLE_AUTH: true
      JWT_SECRET_KEY: test_secret_key_for_ci_environment_32_chars_minimum
      TEST_USER_EMAIL: testuser@aris.pub
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      VITE_LOG_LEVEL: WARN

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/Library/Caches/ms-playwright
        key: playwright-browsers-${{ runner.os }}-webkit

    - name: Install Playwright webkit browser
      working-directory: frontend
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install webkit

    - name: Install Python (for backend)
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install uv
      run: pip install uv

    - name: Setup PostgreSQL
      run: |
        brew install postgresql
        brew services start postgresql
        # Wait for PostgreSQL to be ready
        for i in {1..30}; do
          if pg_isready -q; then
            echo "PostgreSQL is ready!"
            break
          else
            echo "Waiting for PostgreSQL to start... ($i/30)"
            if [ $i -eq 30 ]; then
              echo "PostgreSQL failed to start"
              exit 1
            fi
            sleep 2
          fi
        done
        createdb test_aris

    - name: Create virtual environment and sync dependencies
      working-directory: backend
      run: |
        uv venv
        uv sync --group test --group dev

    - name: Run database migrations
      working-directory: backend
      env:
        DB_URL_LOCAL: postgresql+asyncpg://localhost:5432/test_aris
        DB_URL_PROD: postgresql+asyncpg://localhost:5432/test_aris
        ALEMBIC_DB_URL_LOCAL: postgresql+psycopg2://localhost:5432/test_aris
        ALEMBIC_DB_URL_PROD: postgresql+psycopg2://localhost:5432/test_aris
      run: uv run alembic upgrade head

    - name: Start frontend and run webkit core E2E tests
      env:
        VITE_API_BASE_URL: http://localhost:8000
        VITE_DISABLE_AUTH: true
        TEST_USER_EMAIL: testuser@aris.pub
        TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
        ENV: CI
        DISABLE_AUTH: true
        DB_URL_LOCAL: postgresql+asyncpg://localhost:5432/test_aris
        DB_URL_PROD: postgresql+asyncpg://localhost:5432/test_aris
        ALEMBIC_DB_URL_LOCAL: postgresql+psycopg2://localhost:5432/test_aris
        ALEMBIC_DB_URL_PROD: postgresql+psycopg2://localhost:5432/test_aris
        JWT_SECRET_KEY: test_secret_key_for_ci_environment_32_chars_minimum
      run: |
        # Start backend
        echo "Starting backend for webkit core E2E tests..."
        cd backend
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 &
        BACKEND_PID=$!
        echo "Backend started with PID: $BACKEND_PID"
        
        # Wait for backend
        sleep 8
        for i in {1..5}; do
          if curl -f http://localhost:8000/health; then
            echo "Backend ready for webkit core E2E tests"
            break
          else
            echo "Waiting for backend... ($i/5)"
            if [ $i -eq 5 ]; then
              echo "Backend failed to start for webkit core E2E tests"
              kill $BACKEND_PID 2>/dev/null || true
              exit 1
            fi
            sleep 2
          fi
        done
        
        # Start frontend
        cd ../frontend
        npm run dev &
        FRONTEND_PID=$!
        echo "Frontend started with PID: $FRONTEND_PID"
        
        # Wait for frontend
        sleep 15
        
        # Run webkit/Safari tests only
        echo "Running webkit core E2E tests with backend PID $BACKEND_PID and frontend PID $FRONTEND_PID"
        npx playwright test --grep "@core|@demo-content|@demo-ui|@auth-flows" --project=webkit --project="Mobile Safari" --reporter=github
        TEST_EXIT_CODE=$?
        
        # Cleanup both processes
        echo "Cleaning up processes..."
        kill $FRONTEND_PID 2>/dev/null || true
        kill $BACKEND_PID 2>/dev/null || true
        exit $TEST_EXIT_CODE


# Trigger CI