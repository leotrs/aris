name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      site: ${{ steps.changes.outputs.site }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
            site:
              - 'site/**'

  backend-test:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.backend == 'true' }}
    env:
      ENV: CI

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aris
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    defaults:
      run:
        working-directory: backend

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Create virtual environment
      run: uv venv

    - name: Set up Python
      run: uv python install 3.13

    - name: Sync dependencies
      run: uv sync --group test

    - name: Run linting (ruff)
      run: uv run ruff check

    - name: Debug env & .env.ci file
      run: |
        echo "ENV=$ENV"
        ls -l .env.ci
        cat .env.ci

    - name: Run tests
      run: uv run pytest -n8 --cov=aris --cov-report=xml


    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./backend/coverage.xml
        flags: backend
        token: ${{ secrets.CODECOV_TOKEN }}

  frontend-test:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' }}

    defaults:
      run:
        working-directory: frontend

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Check for missing packages
      run: npm ls --depth=0

    - name: Run linting
      run: npm run lint

    - name: Run tests
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        token: ${{ secrets.CODECOV_TOKEN }}

  site-test:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.site == 'true' }}

    defaults:
      run:
        working-directory: site

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: site/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Check for missing packages
      run: npm ls --depth=0

    - name: Run linting
      run: npm run lint

    - name: Run unit tests
      run: npm run test:run

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Run E2E tests (all browsers)
      run: npm run test:e2e:all

  e2e-test:
    runs-on: ubuntu-latest
    needs: [changes, backend-test, frontend-test]
    if: ${{ always() && (needs.backend-test.result == 'success' || needs.backend-test.result == 'skipped') && (needs.frontend-test.result == 'success' || needs.frontend-test.result == 'skipped') && (needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true') }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aris
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    # Backend setup
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.13

    - name: Setup backend
      working-directory: backend
      run: |
        uv venv
        uv sync --all-groups
        uv pip install -e .

    - name: Setup database and test data
      working-directory: backend
      run: |
        uv run alembic upgrade head
        uv run python scripts/reset_test_user.py
      env:
        TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

    # Frontend setup
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Install Playwright browsers
      working-directory: frontend
      run: npx playwright install --with-deps

    # Start servers and run E2E tests
    - name: Start backend server
      working-directory: backend
      run: uv run uvicorn main:app --host 0.0.0.0 --port 8000 &
      env:
        TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

    - name: Start frontend server
      working-directory: frontend
      run: npm run dev -- --host 0.0.0.0 --port 5173 &
      env:
        VITE_DEV_LOGIN_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

    - name: Wait for servers to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
        timeout 60 bash -c 'until curl -f http://localhost:5173; do sleep 2; done'

    - name: Run E2E tests
      working-directory: frontend
      run: npm run test:e2e
      env:
        VITE_DEV_LOGIN_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
