name: CI

# Optimized CI configuration:
# - Reduced E2E matrix: Site tests only Chrome desktop, Mobile tests only demo + Chrome
# - Removed Safari tests for faster CI
# - Production builds for faster startup
# - Better health checks with timeout
# - Simplified debugging

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Common environment variables for all jobs
  ENV: CI
  BACKEND_PORT: 8000
  FRONTEND_PORT: 5173
  SITE_PORT: 3000
  STORYBOOK_PORT: 6006
  DB_PORT: 5432
  DB_NAME: aris
  TEST_DB_NAME: aris_test
  VITE_API_BASE_URL: http://localhost:8000
  NUXT_BACKEND_URL: http://localhost:8000
  # Database URLs - shared by all jobs
  DB_URL_LOCAL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
  DB_URL_PROD: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
  ALEMBIC_DB_URL_LOCAL: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
  ALEMBIC_DB_URL_PROD: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
  # Container-specific database URLs for e2e-site job
  DB_URL_CONTAINER: postgresql+asyncpg://postgres:postgres@postgres:5432/test_aris
  ALEMBIC_DB_URL_CONTAINER: postgresql+psycopg2://postgres:postgres@postgres:5432/test_aris
  JWT_SECRET_KEY: test_secret_key_for_ci_environment_32_chars_minimum
  # Test user credentials for all jobs
  TEST_USER_EMAIL: testuser@aris.pub
  TEST_USER_PASSWORD: testpassword123
  # Ensure GitHub Actions detection works correctly
  GITHUB_ACTIONS: true

jobs:
  # Unit Tests and Linting (Parallel)
  unit-backend:
    runs-on: ubuntu-latest
    env:
      TEST_USER_EMAIL: testuser@aris.pub
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD || 'testpassword123' }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aris
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5432:5432

    defaults:
      run:
        working-directory: backend

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.13

    - name: Cache uv
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('backend/pyproject.toml') }}

    - name: Cache pytest
      uses: actions/cache@v4
      with:
        path: backend/.pytest_cache
        key: pytest-${{ runner.os }}-${{ hashFiles('backend/pyproject.toml') }}

    - name: Create virtual environment and sync dependencies
      run: |
        uv venv
        uv sync --group test --group dev

    - name: Run linting (ruff)
      run: uv run ruff check

    - name: Run type checking (mypy)
      run: uv run mypy aris/

    - name: Wait for PostgreSQL to be ready
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
        echo "PostgreSQL is ready!"


    - name: Run tests
      env:
        TEST_USER_EMAIL: testuser@aris.pub
        TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      run: uv run pytest -n4 --dist=loadscope --tb=short

    - name: Generate backend failure artifact
      if: failure()
      run: |
        mkdir -p test-results
        cat > test-results/failure-summary.json << EOF
        {
          "job_name": "unit-backend",
          "failure_type": "unit_test",
          "test_framework": "pytest",
          "language": "python",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        }
        EOF
      working-directory: backend

    - name: Upload backend failure artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: unit-backend-failure
        path: backend/test-results/
        retention-days: 7

  unit-frontend:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: frontend

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Cache vitest
      uses: actions/cache@v4
      with:
        path: frontend/node_modules/.vitest
        key: vitest-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json') }}

    - name: Check for missing packages
      run: npm ls --depth=0

    - name: Run linting
      run: npm run lint

    - name: Run tests
      run: npm run test:run

    - name: Generate frontend failure artifact
      if: failure()
      run: |
        mkdir -p test-results
        cat > test-results/failure-summary.json << EOF
        {
          "job_name": "unit-frontend",
          "failure_type": "unit_test",
          "test_framework": "vitest",
          "language": "javascript",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        }
        EOF

    - name: Upload frontend failure artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: unit-frontend-failure
        path: frontend/test-results/
        retention-days: 7

  unit-site:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: site

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: site/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Cache vitest
      uses: actions/cache@v4
      with:
        path: site/node_modules/.vitest
        key: vitest-site-${{ runner.os }}-${{ hashFiles('site/package-lock.json') }}

    - name: Check for missing packages
      run: npm ls --depth=0

    - name: Run linting
      run: npm run lint

    - name: Run unit tests
      run: npm run test:run

  # Site E2E Tests (Essential only - Chrome desktop + mobile)
  e2e-site:
    needs: [unit-backend, unit-frontend, unit-site]
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium]
        device: [desktop, mobile]
    runs-on: ubuntu-latest
    env:
      ENV: CI
      BACKEND_PORT: 8000
      FRONTEND_PORT: 5173
      SITE_PORT: 3000
      STORYBOOK_PORT: 6006
      DB_PORT: 5432
      DB_NAME: aris
      TEST_DB_NAME: aris_test
      VITE_API_BASE_URL: http://localhost:8000
      FRONTEND_URL: http://localhost:5173
      NUXT_BACKEND_URL: http://localhost:8000
      TEST_USER_EMAIL: testuser@aris.pub
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD || 'testpassword123' }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aris
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4


    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: site/package-lock.json

    - name: Install dependencies
      working-directory: site
      run: npm ci

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.13

    - name: Wait for PostgreSQL to be ready
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
        echo "PostgreSQL is ready!"

    - name: Create virtual environment and sync dependencies
      working-directory: backend
      run: |
        uv venv
        uv sync --group test --group dev

    - name: Run database migrations
      working-directory: backend
      run: uv run alembic upgrade head

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: playwright-browsers-site-${{ matrix.browser }}-${{ matrix.device }}

    - name: Install Playwright browsers
      working-directory: site
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install ${{ matrix.browser }} --with-deps

    - name: Start backend, frontend, site, and run E2E tests
      run: |
        # Start backend in background
        echo "Starting backend for site E2E tests..."
        cd backend
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 --workers 1 &
        BACKEND_PID=$!
        echo "Backend started with PID: $BACKEND_PID"
        
        # Wait for backend to be ready
        sleep 8
        for i in {1..5}; do
          if curl -f http://localhost:8000/health; then
            echo "Backend ready for E2E tests"
            break
          else
            echo "Waiting for backend... ($i/5)"
            if [ $i -eq 5 ]; then
              echo "Backend failed to start"
              kill $BACKEND_PID 2>/dev/null || true
              exit 1
            fi
            sleep 2
          fi
        done
        
        # Start frontend in background (production build)
        echo "Starting frontend for site E2E tests..."
        cd ../frontend
        npm run build
        npm run preview &
        FRONTEND_PID=$!
        echo "Frontend started with PID: $FRONTEND_PID"
        
        # Wait for frontend to be ready (faster with production build)
        timeout 30 bash -c 'until curl -sf http://localhost:4173; do sleep 1; done'
        
        # Start site in background (production build)
        echo "Starting site for ${{ matrix.browser }} ${{ matrix.device }} E2E tests..."
        cd ../site
        npm run build
        npm run preview &
        SITE_PID=$!
        echo "Site started with PID: $SITE_PID"
        
        # Wait for site to be ready (faster with production build)
        timeout 30 bash -c 'until curl -sf http://localhost:3000; do sleep 1; done'
        
        # Run site E2E tests (Chrome desktop and mobile)
        if [ "${{ matrix.device }}" = "mobile" ]; then
          echo "Running site E2E tests on Mobile Chrome..."
          npx playwright test --project="Mobile Chrome" --reporter=github
        else
          echo "Running site E2E tests on Chrome desktop..."
          npx playwright test --project="chromium" --reporter=github
        fi
        TEST_EXIT_CODE=$?
        
        # Generate failure artifact if tests failed
        if [ $TEST_EXIT_CODE -ne 0 ]; then
          echo "Generating detailed failure artifact..."
          mkdir -p test-results
          
          # Capture failed test details from Playwright output
          FAILED_TESTS=$(find test-results -name "*.json" -exec cat {} \; 2>/dev/null | jq -r '.tests[]? | select(.status == "failed") | .title' 2>/dev/null || echo "")
          FAILING_FILES=$(find test-results -name "*.json" -exec cat {} \; 2>/dev/null | jq -r '.tests[]? | select(.status == "failed") | .projectName + ":" + .location.file' 2>/dev/null | head -5 || echo "")
          
          cat > test-results/failure-summary.json << EOF
{
  "job_name": "e2e-site-${{ matrix.browser }}-${{ matrix.device }}",
  "failure_type": "e2e_test",
  "test_command": "npx playwright test --project=${{ matrix.device == 'mobile' && 'Mobile Chrome' || 'chromium' }}",
  "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "exit_code": $TEST_EXIT_CODE,
  "browser": "${{ matrix.browser }}",
  "device": "${{ matrix.device }}",
  "failed_tests": [
    $(echo "$FAILED_TESTS" | sed 's/.*/"&"/' | tr '\n' ',' | sed 's/,$//')
  ],
  "failing_files": [
    $(echo "$FAILING_FILES" | sed 's/.*/"&"/' | tr '\n' ',' | sed 's/,$//')
  ],
  "artifacts_available": {
    "playwright_report": $([ -f "playwright-report/index.html" ] && echo "true" || echo "false"),
    "test_results": $([ -d "test-results" ] && echo "true" || echo "false")
  }
}
EOF
        fi
        
        # Cleanup
        echo "Cleaning up processes..."
        kill $SITE_PID 2>/dev/null || true
        kill $FRONTEND_PID 2>/dev/null || true
        kill $BACKEND_PID 2>/dev/null || true
        exit $TEST_EXIT_CODE

    - name: Upload failure artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-site-failure-${{ matrix.browser }}-${{ matrix.device }}
        path: |
          site/test-results/
          site/playwright-report/
        retention-days: 7

  # Desktop E2E Tests (Chrome)
  e2e-desktop-chrome:
    needs: [unit-backend, unit-frontend, unit-site]
    strategy:
      fail-fast: false
      matrix:
        test-type: [demo, auth]
    runs-on: ubuntu-latest
    env:
      TEST_USER_EMAIL: testuser@aris.pub
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      VITE_LOG_LEVEL: WARN
      COPILOT_PROVIDER: mock

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aris
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.13

    - name: Wait for PostgreSQL to be ready
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
        echo "PostgreSQL is ready!"

    - name: Create virtual environment and sync dependencies
      working-directory: backend
      run: |
        uv venv
        uv sync --group test --group dev

    - name: Run database migrations and setup test user
      working-directory: backend
      run: |
        uv run alembic upgrade head
        if [ "${{ matrix.test-type }}" = "auth" ]; then
          uv run python scripts/reset_test_user.py
        fi

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: playwright-browsers-${{ runner.os }}-chromium

    - name: Install Playwright browsers
      working-directory: frontend
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install chromium --with-deps

    - name: Start backend and frontend, run E2E tests
      run: |
        # Start backend
        echo "Starting backend for ${{ matrix.test-type }} E2E tests on Ubuntu (Chrome)..."
        cd backend
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 --workers 1 &
        BACKEND_PID=$!
        echo "Backend started with PID: $BACKEND_PID"

        # Wait for backend
        sleep 8
        for i in {1..5}; do
          if curl -f http://localhost:8000/health; then
            echo "Backend ready for E2E tests"
            break
          else
            echo "Waiting for backend... ($i/5)"
            if [ $i -eq 5 ]; then
              echo "Backend failed to start"
              kill $BACKEND_PID 2>/dev/null || true
              exit 1
            fi
            sleep 2
          fi
        done

        # Start frontend (production build)
        cd ../frontend
        npm run build
        npm run preview &
        FRONTEND_PID=$!
        echo "Frontend started with PID: $FRONTEND_PID"

        # Wait for frontend (faster with production build)
        timeout 30 bash -c 'until curl -sf http://localhost:4173; do sleep 1; done'

        # Run tests based on test type (Chrome only)
        if [ "${{ matrix.test-type }}" = "demo" ]; then
          echo "Running demo E2E tests: @core|@demo-content|@demo-ui (excluding @mobile-only and @site)"
          CI_TEST_TYPE=demo npx playwright test --grep "(@core|@demo-content|@demo-ui)(?!.*@mobile-only)(?!.*@site)" --project=chromium --reporter=github
        else
          echo "Running auth E2E tests: @auth[^-]|@auth-flows (excluding @mobile-only and @site)"
          CI_TEST_TYPE=auth npx playwright test --grep "(@auth[^-]|@auth-flows)(?!.*@mobile-only)(?!.*@site)" --project=chromium --reporter=github
        fi
        TEST_EXIT_CODE=$?

        # Generate failure artifact if tests failed
        if [ $TEST_EXIT_CODE -ne 0 ]; then
          echo "Generating E2E failure artifact..."
          mkdir -p test-results
          cat > test-results/failure-summary.json << EOF
{
  "job_name": "e2e-desktop-chrome-${{ matrix.test-type }}",
  "failure_type": "e2e_test",
  "test_type": "${{ matrix.test-type }}",
  "browser": "chrome",
  "platform": "desktop",
  "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "exit_code": $TEST_EXIT_CODE
}
EOF
        fi

        # Cleanup
        echo "Cleaning up processes..."
        kill $FRONTEND_PID 2>/dev/null || true
        kill $BACKEND_PID 2>/dev/null || true
        exit $TEST_EXIT_CODE

    - name: Upload E2E failure artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-desktop-chrome-failure-${{ matrix.test-type }}
        path: |
          frontend/test-results/
          frontend/playwright-report/
        retention-days: 7

  # Desktop E2E Tests (Firefox)
  e2e-desktop-firefox:
    needs: [unit-backend, unit-frontend, unit-site]
    strategy:
      fail-fast: false
      matrix:
        test-type: [demo, auth]
    runs-on: ubuntu-latest
    env:
      DB_URL_LOCAL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
      DB_URL_PROD: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
      ALEMBIC_DB_URL_LOCAL: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
      ALEMBIC_DB_URL_PROD: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
      JWT_SECRET_KEY: test_secret_key_for_ci_environment_32_chars_minimum
      TEST_USER_EMAIL: testuser@aris.pub
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      VITE_LOG_LEVEL: WARN
      VITE_API_BASE_URL: http://localhost:8000

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aris
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.13

    - name: Wait for PostgreSQL to be ready
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
        echo "PostgreSQL is ready!"

    - name: Create virtual environment and sync dependencies
      working-directory: backend
      run: |
        uv venv
        uv sync --group test --group dev

    - name: Run database migrations
      working-directory: backend
      run: |
        uv run alembic upgrade head
        ${{ matrix.test-type == 'auth' && 'uv run python scripts/reset_test_user.py' || '' }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: playwright-browsers-${{ runner.os }}-firefox

    - name: Install Playwright browsers
      working-directory: frontend
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install firefox --with-deps

    - name: Start backend and frontend, run E2E tests
      run: |
        # Start backend
        echo "Starting backend for ${{ matrix.test-type }} E2E tests on Ubuntu (Firefox)..."
        cd backend
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 --workers 1 &
        BACKEND_PID=$!
        echo "Backend started with PID: $BACKEND_PID"

        # Wait for backend
        sleep 8
        for i in {1..5}; do
          if curl -f http://localhost:8000/health; then
            echo "Backend ready for E2E tests"
            break
          else
            echo "Waiting for backend... ($i/5)"
            if [ $i -eq 5 ]; then
              echo "Backend failed to start"
              kill $BACKEND_PID 2>/dev/null || true
              exit 1
            fi
            sleep 2
          fi
        done

        # Start frontend (production build)
        cd ../frontend
        npm run build
        npm run preview &
        FRONTEND_PID=$!
        echo "Frontend started with PID: $FRONTEND_PID"

        # Wait for frontend (faster with production build)
        timeout 30 bash -c 'until curl -sf http://localhost:4173; do sleep 1; done'

        # Run tests based on auth mode (Firefox only)
        if [ "${{ matrix.test-type }}" = "demo" ]; then
          echo "Running demo E2E tests: @core|@demo-content|@demo-ui (excluding @mobile-only and @site)"
          CI_TEST_TYPE=demo npx playwright test --grep "(@core|@demo-content|@demo-ui)(?!.*@mobile-only)(?!.*@site)" --project=firefox --reporter=github
        else
          echo "Running auth E2E tests: @auth[^-]|@auth-flows (excluding @mobile-only and @site)"
          CI_TEST_TYPE=auth npx playwright test --grep "(@auth[^-]|@auth-flows)(?!.*@mobile-only)(?!.*@site)" --project=firefox --reporter=github
        fi
        TEST_EXIT_CODE=$?

        # Cleanup
        echo "Cleaning up processes..."
        kill $FRONTEND_PID 2>/dev/null || true
        kill $BACKEND_PID 2>/dev/null || true
        exit $TEST_EXIT_CODE


  # Mobile E2E Tests (Optional - can fail without breaking CI)
  e2e-mobile-chrome:
    needs: [e2e-desktop-chrome]
    continue-on-error: true  # Allow this job to fail
    strategy:
      fail-fast: false
      matrix:
        test-type: [demo]  # Only demo tests for mobile
    runs-on: ubuntu-latest
    env:
      TEST_USER_EMAIL: testuser@aris.pub
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      VITE_LOG_LEVEL: WARN
      COPILOT_PROVIDER: mock

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aris
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.13

    - name: Wait for PostgreSQL to be ready
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
        echo "PostgreSQL is ready!"

    - name: Create virtual environment and sync dependencies
      working-directory: backend
      run: |
        uv venv
        uv sync --group test --group dev

    - name: Run database migrations and setup test user
      working-directory: backend
      run: |
        uv run alembic upgrade head
        if [ "${{ matrix.test-type }}" = "auth" ]; then
          uv run python scripts/reset_test_user.py
        fi

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: playwright-browsers-${{ runner.os }}-mobile-chrome

    - name: Install Playwright browsers
      working-directory: frontend
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install chromium --with-deps


    - name: Start backend and frontend, run Mobile Chrome E2E tests
      run: |
        # Start backend
        echo "Starting backend for ${{ matrix.test-type }} Mobile Chrome E2E tests..."
        cd backend
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 --workers 1 &
        BACKEND_PID=$!
        echo "Backend started with PID: $BACKEND_PID"

        # Wait for backend
        sleep 8
        for i in {1..5}; do
          if curl -f http://localhost:8000/health; then
            echo "Backend ready for E2E tests"
            break
          else
            echo "Waiting for backend... ($i/5)"
            if [ $i -eq 5 ]; then
              echo "Backend failed to start"
              kill $BACKEND_PID 2>/dev/null || true
              exit 1
            fi
            sleep 2
          fi
        done

        # Start frontend (production build)
        cd ../frontend
        npm run build
        npm run preview &
        FRONTEND_PID=$!
        echo "Frontend started with PID: $FRONTEND_PID"

        # Wait for frontend (faster with production build)
        timeout 30 bash -c 'until curl -sf http://localhost:4173; do sleep 1; done'

        # Run mobile Chrome tests
        if [ "${{ matrix.test-type }}" = "demo" ]; then
          echo "Running demo Mobile Chrome E2E tests: @core|@demo-content|@demo-ui|@mobile-only (excluding @desktop-only, @auth, and @site)"
          CI_TEST_TYPE=demo npx playwright test --grep "^(?!.*@auth).*(@core|@demo-content|@demo-ui|@mobile-only)(?!.*@desktop-only)(?!.*@site)" --project="Mobile Chrome" --reporter=github
        else
          echo "Running auth Mobile Chrome E2E tests: @auth[^-]|@auth-flows (excluding @desktop-only and @site)"
          CI_TEST_TYPE=auth npx playwright test --grep "(@auth[^-]|@auth-flows)(?!.*@desktop-only)(?!.*@site)" --project="Mobile Chrome" --reporter=github
        fi
        TEST_EXIT_CODE=$?

        # Cleanup
        echo "Cleaning up processes..."
        kill $FRONTEND_PID 2>/dev/null || true
        kill $BACKEND_PID 2>/dev/null || true
        exit $TEST_EXIT_CODE

  e2e-mobile-firefox:
    needs: [e2e-desktop-firefox]  # Run after desktop Firefox tests pass
    continue-on-error: true  # Allow this job to fail
    strategy:
      fail-fast: false
      matrix:
        test-type: [demo]  # Only demo tests for mobile
    runs-on: ubuntu-latest
    env:
      DB_URL_LOCAL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
      DB_URL_PROD: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
      ALEMBIC_DB_URL_LOCAL: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
      ALEMBIC_DB_URL_PROD: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
      JWT_SECRET_KEY: test_secret_key_for_ci_environment_32_chars_minimum
      TEST_USER_EMAIL: testuser@aris.pub
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      VITE_LOG_LEVEL: WARN
      VITE_API_BASE_URL: http://localhost:8000

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aris
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.13

    - name: Wait for PostgreSQL to be ready
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
        echo "PostgreSQL is ready!"

    - name: Create virtual environment and sync dependencies
      working-directory: backend
      run: |
        uv venv
        uv sync --group test --group dev

    - name: Run database migrations
      working-directory: backend
      run: |
        uv run alembic upgrade head
        ${{ matrix.test-type == 'auth' && 'uv run python scripts/reset_test_user.py' || '' }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: playwright-browsers-${{ runner.os }}-mobile-firefox

    - name: Install Playwright browsers
      working-directory: frontend
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install firefox --with-deps

    - name: Start backend and frontend, run Mobile Firefox E2E tests
      run: |
        # Start backend
        echo "Starting backend for ${{ matrix.test-type }} Mobile Firefox E2E tests..."
        cd backend
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 --workers 1 &
        BACKEND_PID=$!
        echo "Backend started with PID: $BACKEND_PID"

        # Wait for backend
        sleep 8
        for i in {1..5}; do
          if curl -f http://localhost:8000/health; then
            echo "Backend ready for E2E tests"
            break
          else
            echo "Waiting for backend... ($i/5)"
            if [ $i -eq 5 ]; then
              echo "Backend failed to start"
              kill $BACKEND_PID 2>/dev/null || true
              exit 1
            fi
            sleep 2
          fi
        done

        # Start frontend (production build)
        cd ../frontend
        npm run build
        npm run preview &
        FRONTEND_PID=$!
        echo "Frontend started with PID: $FRONTEND_PID"

        # Wait for frontend (faster with production build)
        timeout 30 bash -c 'until curl -sf http://localhost:4173; do sleep 1; done'

        # Run mobile Firefox tests
        if [ "${{ matrix.test-type }}" = "demo" ]; then
          echo "Running demo Mobile Firefox E2E tests: @core|@demo-content|@demo-ui|@mobile-only (excluding @desktop-only, @auth, and @site)"
          CI_TEST_TYPE=demo npx playwright test --grep "^(?!.*@auth).*(@core|@demo-content|@demo-ui|@mobile-only)(?!.*@desktop-only)(?!.*@site)" --project="Mobile Firefox" --reporter=github
        else
          echo "Running auth Mobile Firefox E2E tests: @auth[^-]|@auth-flows (excluding @desktop-only and @site)"
          CI_TEST_TYPE=auth npx playwright test --grep "(@auth[^-]|@auth-flows)(?!.*@desktop-only)(?!.*@site)" --project="Mobile Firefox" --reporter=github
        fi
        TEST_EXIT_CODE=$?

        # Cleanup
        echo "Cleaning up processes..."
        kill $FRONTEND_PID 2>/dev/null || true
        kill $BACKEND_PID 2>/dev/null || true
        exit $TEST_EXIT_CODE



# Trigger CI
