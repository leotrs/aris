name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Common environment variables for all jobs
  ENV: CI
  BACKEND_PORT: 8000
  FRONTEND_PORT: 5173
  SITE_PORT: 3000
  STORYBOOK_PORT: 6006
  DB_PORT: 5432
  DB_NAME: aris
  TEST_DB_NAME: aris_test
  VITE_API_BASE_URL: http://localhost:8000
  NUXT_BACKEND_URL: http://localhost:8000
  # Database URLs - shared by all jobs
  DB_URL_LOCAL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
  DB_URL_PROD: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
  ALEMBIC_DB_URL_LOCAL: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
  ALEMBIC_DB_URL_PROD: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
  JWT_SECRET_KEY: test_secret_key_for_ci_environment_32_chars_minimum

jobs:
  # Unit Tests and Linting (Parallel)
  unit-backend:
    runs-on: ubuntu-latest
    env:
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD || 'testpassword123' }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aris
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5432:5432

    defaults:
      run:
        working-directory: backend

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.13

    - name: Cache uv
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('backend/pyproject.toml') }}

    - name: Cache pytest
      uses: actions/cache@v4
      with:
        path: backend/.pytest_cache
        key: pytest-${{ runner.os }}-${{ hashFiles('backend/pyproject.toml') }}

    - name: Create virtual environment and sync dependencies
      run: |
        uv venv
        uv sync --group test --group dev

    - name: Run linting (ruff)
      run: uv run ruff check

    - name: Run type checking (mypy)
      run: uv run mypy aris/

    - name: Wait for PostgreSQL to be ready
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
        echo "PostgreSQL is ready!"


    - name: Run tests
      env:
        TEST_USER_EMAIL: testuser@aris.pub
        TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      run: uv run pytest -n4 --dist=loadscope --tb=short

  unit-frontend:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: frontend

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Cache vitest
      uses: actions/cache@v4
      with:
        path: frontend/node_modules/.vitest
        key: vitest-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json') }}

    - name: Check for missing packages
      run: npm ls --depth=0

    - name: Run linting
      run: npm run lint

    - name: Run tests
      run: npm run test:run

  unit-site:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: site

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: site/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Cache vitest
      uses: actions/cache@v4
      with:
        path: site/node_modules/.vitest
        key: vitest-site-${{ runner.os }}-${{ hashFiles('site/package-lock.json') }}

    - name: Check for missing packages
      run: npm ls --depth=0

    - name: Run linting
      run: npm run lint

    - name: Run unit tests
      run: npm run test:run

  # Site E2E Tests (All Browsers)
  e2e-site:
    needs: [unit-backend, unit-frontend, unit-site]
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        device: [desktop, mobile]
    runs-on: ubuntu-latest
    env:
      ENV: CI
      BACKEND_PORT: 8000
      FRONTEND_PORT: 5173
      SITE_PORT: 3000
      STORYBOOK_PORT: 6006
      DB_PORT: 5432
      DB_NAME: aris
      TEST_DB_NAME: aris_test
      VITE_API_BASE_URL: http://localhost:8000
      FRONTEND_URL: http://localhost:5173
      NUXT_BACKEND_URL: http://localhost:8000
      TEST_USER_EMAIL: testuser@aris.pub
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD || 'testpassword123' }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aris
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4


    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: site/package-lock.json

    - name: Install dependencies
      working-directory: site
      run: npm ci

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.13

    - name: Wait for PostgreSQL to be ready
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
        echo "PostgreSQL is ready!"

    - name: Create virtual environment and sync dependencies
      working-directory: backend
      run: |
        uv venv
        uv sync --group test --group dev

    - name: Run database migrations
      working-directory: backend
      run: uv run alembic upgrade head

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: playwright-browsers-site-${{ matrix.browser }}-${{ matrix.device }}

    - name: Install Playwright browsers
      working-directory: site
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: |
        npx playwright install ${{ matrix.browser }} --with-deps
        # Install additional WebKit dependencies for Ubuntu
        if [ "${{ matrix.browser }}" = "webkit" ]; then
          sudo apt-get update
          sudo apt-get install -y libwoff2-1.0.2 libwoff2-dev
        fi

    - name: Start backend, frontend, site, and run E2E tests
      run: |
        # Start backend in background
        echo "Starting backend for site E2E tests..."
        cd backend
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 &
        BACKEND_PID=$!
        echo "Backend started with PID: $BACKEND_PID"
        
        # Wait for backend to be ready
        sleep 8
        for i in {1..5}; do
          if curl -f http://localhost:8000/health; then
            echo "Backend ready for E2E tests"
            break
          else
            echo "Waiting for backend... ($i/5)"
            if [ $i -eq 5 ]; then
              echo "Backend failed to start"
              kill $BACKEND_PID 2>/dev/null || true
              exit 1
            fi
            sleep 2
          fi
        done
        
        # Start frontend in background
        echo "Starting frontend for site E2E tests..."
        cd ../frontend
        npm run dev &
        FRONTEND_PID=$!
        echo "Frontend started with PID: $FRONTEND_PID"
        
        # Wait for frontend to be ready
        sleep 15
        for i in {1..5}; do
          if curl -f http://localhost:5173; then
            echo "Frontend ready for E2E tests"
            break
          else
            echo "Waiting for frontend... ($i/5)"
            if [ $i -eq 5 ]; then
              echo "Frontend failed to start"
              kill $FRONTEND_PID 2>/dev/null || true
              kill $BACKEND_PID 2>/dev/null || true
              exit 1
            fi
            sleep 3
          fi
        done
        
        # Start site in background
        echo "Starting site for ${{ matrix.browser }} ${{ matrix.device }} E2E tests..."
        cd ../site
        npm run dev &
        SITE_PID=$!
        echo "Site started with PID: $SITE_PID"
        
        # Wait for site to be ready
        sleep 10
        for i in {1..5}; do
          if curl -f http://localhost:3000; then
            echo "Site ready for E2E tests"
            break
          else
            echo "Waiting for site... ($i/5)"
            if [ $i -eq 5 ]; then
              echo "Site failed to start"
              kill $SITE_PID 2>/dev/null || true
              kill $FRONTEND_PID 2>/dev/null || true
              kill $BACKEND_PID 2>/dev/null || true
              exit 1
            fi
            sleep 3
          fi
        done
        
        # Run E2E tests for specific browser and device
        if [ "${{ matrix.device }}" = "mobile" ]; then
          if [ "${{ matrix.browser }}" = "webkit" ]; then
            npx playwright test --project="Mobile Safari" --reporter=github
          elif [ "${{ matrix.browser }}" = "firefox" ]; then
            npx playwright test --project="Mobile Firefox" --reporter=github
          else
            npx playwright test --project="Mobile Chrome" --reporter=github
          fi
        else
          if [ "${{ matrix.browser }}" = "webkit" ]; then
            npx playwright test --project="webkit" --reporter=github
          elif [ "${{ matrix.browser }}" = "firefox" ]; then
            npx playwright test --project="firefox" --reporter=github
          else
            npx playwright test --project="chromium" --reporter=github
          fi
        fi
        TEST_EXIT_CODE=$?
        
        # Cleanup
        echo "Cleaning up processes..."
        kill $SITE_PID 2>/dev/null || true
        kill $FRONTEND_PID 2>/dev/null || true
        kill $BACKEND_PID 2>/dev/null || true
        exit $TEST_EXIT_CODE

  # Desktop E2E Tests (Chrome)
  e2e-desktop-chrome:
    needs: [unit-backend, unit-frontend, unit-site]
    strategy:
      fail-fast: false
      matrix:
        test-type: [demo, auth]
    runs-on: ubuntu-latest
    env:
      TEST_USER_EMAIL: testuser@aris.pub
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      VITE_LOG_LEVEL: WARN
      COPILOT_PROVIDER: mock

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aris
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.13

    - name: Wait for PostgreSQL to be ready
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
        echo "PostgreSQL is ready!"

    - name: Create virtual environment and sync dependencies
      working-directory: backend
      run: |
        uv venv
        uv sync --group test --group dev

    - name: Run database migrations and setup test user (with debugging)
      working-directory: backend
      run: |
        echo "🔍 [DEBUG] Starting database setup for test-type: ${{ matrix.test-type }}"
        echo "🔍 [DEBUG] Environment variables:"
        echo "  - TEST_USER_EMAIL: ${TEST_USER_EMAIL:-UNSET}"
        echo "  - TEST_USER_PASSWORD length: ${#TEST_USER_PASSWORD}"
        echo "  - DB_URL_LOCAL: ${DB_URL_LOCAL:-UNSET}"
        echo "  - PostgreSQL connection test:"

        # Test database connectivity
        if pg_isready -h localhost -p 5432 -U postgres; then
          echo "✅ PostgreSQL connection successful"
        else
          echo "❌ PostgreSQL connection failed"
          exit 1
        fi

        # Run migrations
        echo "🔄 Running database migrations..."
        uv run alembic upgrade head
        MIGRATION_EXIT_CODE=$?
        echo "📊 Migration exit code: $MIGRATION_EXIT_CODE"

        # Setup test user for enabled auth mode
        if [ "${{ matrix.test-type }}" = "auth" ]; then
          echo "🔑 Auth tests - creating test user..."
          echo "📧 Creating test user: ${TEST_USER_EMAIL}"
          uv run python scripts/reset_test_user.py
          RESET_USER_EXIT_CODE=$?
          echo "📊 Reset test user exit code: $RESET_USER_EXIT_CODE"

          if [ $RESET_USER_EXIT_CODE -eq 0 ]; then
            echo "✅ Test user creation/reset completed successfully"
          else
            echo "❌ Test user creation/reset FAILED with exit code: $RESET_USER_EXIT_CODE"
            exit $RESET_USER_EXIT_CODE
          fi
        else
          echo "🔓 Demo tests - skipping test user creation"
        fi

        echo "✅ [DEBUG] Database setup completed for ${{ matrix.test-type }} tests"

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: playwright-browsers-${{ runner.os }}-chromium

    - name: Install Playwright browsers
      working-directory: frontend
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install chromium --with-deps

    - name: Start backend and frontend, run E2E tests
      run: |
        # Start backend
        echo "Starting backend for ${{ matrix.test-type }} E2E tests on Ubuntu (Chrome)..."
        cd backend
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 &
        BACKEND_PID=$!
        echo "Backend started with PID: $BACKEND_PID"

        # Wait for backend
        sleep 8
        for i in {1..5}; do
          if curl -f http://localhost:8000/health; then
            echo "Backend ready for E2E tests"
            break
          else
            echo "Waiting for backend... ($i/5)"
            if [ $i -eq 5 ]; then
              echo "Backend failed to start"
              kill $BACKEND_PID 2>/dev/null || true
              exit 1
            fi
            sleep 2
          fi
        done

        # Start frontend
        cd ../frontend
        npm run dev &
        FRONTEND_PID=$!
        echo "Frontend started with PID: $FRONTEND_PID"

        # Wait for frontend
        sleep 15

        # Run tests based on test type (Chrome only)
        if [ "${{ matrix.test-type }}" = "demo" ]; then
          echo "Running demo E2E tests: @core|@demo-content|@demo-ui (excluding @mobile-only)"
          CI_TEST_TYPE=demo npx playwright test --grep "(@core|@demo-content|@demo-ui)(?!.*@mobile-only)" --project=chromium --reporter=github
        else
          echo "Running auth E2E tests: @auth[^-]|@auth-flows (excluding @mobile-only)"
          CI_TEST_TYPE=auth npx playwright test --grep "(@auth[^-]|@auth-flows)(?!.*@mobile-only)" --project=chromium --reporter=github
        fi
        TEST_EXIT_CODE=$?

        # Cleanup
        echo "Cleaning up processes..."
        kill $FRONTEND_PID 2>/dev/null || true
        kill $BACKEND_PID 2>/dev/null || true
        exit $TEST_EXIT_CODE

  # Desktop E2E Tests (Firefox)
  e2e-desktop-firefox:
    needs: [unit-backend, unit-frontend, unit-site]
    strategy:
      fail-fast: false
      matrix:
        test-type: [demo, auth]
    runs-on: ubuntu-latest
    env:
      DB_URL_LOCAL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
      DB_URL_PROD: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
      ALEMBIC_DB_URL_LOCAL: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
      ALEMBIC_DB_URL_PROD: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
      JWT_SECRET_KEY: test_secret_key_for_ci_environment_32_chars_minimum
      TEST_USER_EMAIL: testuser@aris.pub
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      VITE_LOG_LEVEL: WARN
      VITE_API_BASE_URL: http://localhost:8000

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aris
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.13

    - name: Wait for PostgreSQL to be ready
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
        echo "PostgreSQL is ready!"

    - name: Create virtual environment and sync dependencies
      working-directory: backend
      run: |
        uv venv
        uv sync --group test --group dev

    - name: Run database migrations
      working-directory: backend
      run: |
        uv run alembic upgrade head
        ${{ matrix.test-type == 'auth' && 'uv run python scripts/reset_test_user.py' || '' }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: playwright-browsers-${{ runner.os }}-firefox

    - name: Install Playwright browsers
      working-directory: frontend
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install firefox --with-deps

    - name: Start backend and frontend, run E2E tests
      run: |
        # Start backend
        echo "Starting backend for ${{ matrix.test-type }} E2E tests on Ubuntu (Firefox)..."
        cd backend
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 &
        BACKEND_PID=$!
        echo "Backend started with PID: $BACKEND_PID"

        # Wait for backend
        sleep 8
        for i in {1..5}; do
          if curl -f http://localhost:8000/health; then
            echo "Backend ready for E2E tests"
            break
          else
            echo "Waiting for backend... ($i/5)"
            if [ $i -eq 5 ]; then
              echo "Backend failed to start"
              kill $BACKEND_PID 2>/dev/null || true
              exit 1
            fi
            sleep 2
          fi
        done

        # Start frontend
        cd ../frontend
        npm run dev &
        FRONTEND_PID=$!
        echo "Frontend started with PID: $FRONTEND_PID"

        # Wait for frontend
        sleep 15

        # Run tests based on auth mode (Firefox only)
        if [ "${{ matrix.test-type }}" = "demo" ]; then
          echo "Running demo E2E tests: @core|@demo-content|@demo-ui (excluding @mobile-only)"
          CI_TEST_TYPE=demo npx playwright test --grep "(@core|@demo-content|@demo-ui)(?!.*@mobile-only)" --project=firefox --reporter=github
        else
          echo "Running auth E2E tests: @auth[^-]|@auth-flows (excluding @mobile-only)"
          CI_TEST_TYPE=auth npx playwright test --grep "(@auth[^-]|@auth-flows)(?!.*@mobile-only)" --project=firefox --reporter=github
        fi
        TEST_EXIT_CODE=$?

        # Cleanup
        echo "Cleaning up processes..."
        kill $FRONTEND_PID 2>/dev/null || true
        kill $BACKEND_PID 2>/dev/null || true
        exit $TEST_EXIT_CODE

  # Desktop E2E Tests (Safari)
  e2e-desktop-safari:
    needs: [unit-backend, unit-frontend, unit-site]
    strategy:
      fail-fast: false
      matrix:
        test-type: [demo, auth]
    runs-on: macos-latest
    env:
      TEST_USER_EMAIL: testuser@aris.pub
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      VITE_LOG_LEVEL: WARN
      COPILOT_PROVIDER: mock

    steps:
    - uses: actions/checkout@v4

    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install uv
      run: pip install uv

    - name: Setup PostgreSQL
      run: |
        brew install postgresql
        brew services start postgresql
        # Wait for PostgreSQL to be ready
        for i in {1..30}; do
          if pg_isready -q; then
            echo "PostgreSQL is ready!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "PostgreSQL failed to start"
            exit 1
          fi
          sleep 2
        done
        # Create postgres user with password to match global DB URLs
        createuser -s postgres
        psql -d postgres -c "ALTER USER postgres PASSWORD 'postgres';"
        createdb test_aris

    - name: Create virtual environment and sync dependencies
      working-directory: backend
      run: |
        uv venv
        uv sync --group test --group dev

    - name: Run database migrations and setup test user (with debugging)
      working-directory: backend
      run: |
        echo "🔍 [DEBUG] Starting database setup for test-type: ${{ matrix.test-type }}"
        echo "🔍 [DEBUG] Environment variables:"
        echo "  - TEST_USER_EMAIL: ${TEST_USER_EMAIL:-UNSET}"
        echo "  - TEST_USER_PASSWORD length: ${#TEST_USER_PASSWORD}"
        echo "  - DB_URL_LOCAL: ${DB_URL_LOCAL:-UNSET}"
        echo "  - PostgreSQL connection test:"

        # Test database connectivity
        if pg_isready -h localhost -p 5432 -U postgres; then
          echo "✅ PostgreSQL connection successful"
        else
          echo "❌ PostgreSQL connection failed"
          exit 1
        fi

        # Run migrations
        echo "🔄 Running database migrations..."
        uv run alembic upgrade head
        MIGRATION_EXIT_CODE=$?
        echo "📊 Migration exit code: $MIGRATION_EXIT_CODE"

        # Setup test user for enabled auth mode
        if [ "${{ matrix.test-type }}" = "auth" ]; then
          echo "🔑 Auth tests - creating test user..."
          echo "📧 Creating test user: ${TEST_USER_EMAIL}"
          uv run python scripts/reset_test_user.py
          RESET_USER_EXIT_CODE=$?
          echo "📊 Reset test user exit code: $RESET_USER_EXIT_CODE"

          if [ $RESET_USER_EXIT_CODE -eq 0 ]; then
            echo "✅ Test user creation/reset completed successfully"
          else
            echo "❌ Test user creation/reset FAILED with exit code: $RESET_USER_EXIT_CODE"
            exit $RESET_USER_EXIT_CODE
          fi
        else
          echo "🔓 Demo tests - skipping test user creation"
        fi

        echo "✅ [DEBUG] Database setup completed for ${{ matrix.test-type }} tests"

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/Library/Caches/ms-playwright
        key: playwright-browsers-${{ runner.os }}-webkit

    - name: Install Playwright browsers
      working-directory: frontend
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install webkit

    - name: Start backend and frontend, run E2E tests
      run: |
        # Start backend
        echo "Starting backend for ${{ matrix.test-type }} E2E tests on macOS (Safari)..."
        cd backend
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 &
        BACKEND_PID=$!
        echo "Backend started with PID: $BACKEND_PID"

        # Wait for backend
        sleep 8
        for i in {1..5}; do
          if curl -f http://localhost:8000/health; then
            echo "Backend ready for E2E tests"
            break
          else
            echo "Waiting for backend... ($i/5)"
            if [ $i -eq 5 ]; then
              echo "Backend failed to start"
              kill $BACKEND_PID 2>/dev/null || true
              exit 1
            fi
            sleep 2
          fi
        done

        # Start frontend
        cd ../frontend
        npm run dev &
        FRONTEND_PID=$!
        echo "Frontend started with PID: $FRONTEND_PID"

        # Wait for frontend
        sleep 15

        # Run tests based on auth mode (desktop webkit only)
        if [ "${{ matrix.test-type }}" = "demo" ]; then
          echo "Running demo E2E tests: @core|@demo-content|@demo-ui (excluding @mobile-only and @auth)"
          CI_TEST_TYPE=demo npx playwright test --grep "(@core|@demo-content|@demo-ui)(?!.*@mobile-only)(?!.*@auth)" --project=webkit --reporter=github
        else
          echo "Running auth E2E tests: @auth[^-]|@auth-flows (excluding @mobile-only)"
          CI_TEST_TYPE=auth npx playwright test --grep "(@auth[^-]|@auth-flows)(?!.*@mobile-only)" --project=webkit --reporter=github
        fi
        TEST_EXIT_CODE=$?

        # Cleanup
        echo "Cleaning up processes..."
        kill $FRONTEND_PID 2>/dev/null || true
        kill $BACKEND_PID 2>/dev/null || true
        exit $TEST_EXIT_CODE

  # Mobile E2E Tests (Optional - can fail without breaking CI)
  e2e-mobile-chrome:
    needs: [e2e-desktop-chrome]
    continue-on-error: true  # Allow this job to fail
    strategy:
      fail-fast: false
      matrix:
        test-type: [demo, auth]
    runs-on: ubuntu-latest
    env:
      TEST_USER_EMAIL: testuser@aris.pub
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      VITE_LOG_LEVEL: WARN
      COPILOT_PROVIDER: mock

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aris
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.13

    - name: Wait for PostgreSQL to be ready
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
        echo "PostgreSQL is ready!"

    - name: Create virtual environment and sync dependencies
      working-directory: backend
      run: |
        uv venv
        uv sync --group test --group dev

    - name: Run database migrations and setup test user (with debugging)
      working-directory: backend
      run: |
        echo "🔍 [DEBUG] Starting database setup for test-type: ${{ matrix.test-type }}"
        echo "🔍 [DEBUG] Environment variables:"
        echo "  - TEST_USER_EMAIL: ${TEST_USER_EMAIL:-UNSET}"
        echo "  - TEST_USER_PASSWORD length: ${#TEST_USER_PASSWORD}"
        echo "  - DB_URL_LOCAL: ${DB_URL_LOCAL:-UNSET}"
        echo "  - PostgreSQL connection test:"

        # Test database connectivity
        if pg_isready -h localhost -p 5432 -U postgres; then
          echo "✅ PostgreSQL connection successful"
        else
          echo "❌ PostgreSQL connection failed"
          exit 1
        fi

        # Run migrations
        echo "🔄 Running database migrations..."
        uv run alembic upgrade head
        MIGRATION_EXIT_CODE=$?
        echo "📊 Migration exit code: $MIGRATION_EXIT_CODE"

        # Setup test user for enabled auth mode
        if [ "${{ matrix.test-type }}" = "auth" ]; then
          echo "🔑 Auth tests - creating test user..."
          echo "📧 Creating test user: ${TEST_USER_EMAIL}"
          uv run python scripts/reset_test_user.py
          RESET_USER_EXIT_CODE=$?
          echo "📊 Reset test user exit code: $RESET_USER_EXIT_CODE"

          if [ $RESET_USER_EXIT_CODE -eq 0 ]; then
            echo "✅ Test user creation/reset completed successfully"
          else
            echo "❌ Test user creation/reset FAILED with exit code: $RESET_USER_EXIT_CODE"
            exit $RESET_USER_EXIT_CODE
          fi
        else
          echo "🔓 Demo tests - skipping test user creation"
        fi

        echo "✅ [DEBUG] Database setup completed for ${{ matrix.test-type }} tests"

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: playwright-browsers-${{ runner.os }}-mobile-chrome

    - name: Install Playwright browsers
      working-directory: frontend
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install chromium --with-deps

    - name: Platform-specific environment debugging
      run: |
        echo "🔍 [PLATFORM-DEBUG] Platform debugging for Ubuntu:"
        echo "  - Runner OS: $RUNNER_OS"
        echo "  - OS Name: $(uname -s)"
        echo "  - OS Version: $(uname -r)"
        echo "  - Architecture: $(uname -m)"
        echo "  - PostgreSQL version: $(postgres --version 2>/dev/null || echo 'not in PATH')"
        echo "  - Python version: $(python --version 2>/dev/null || echo 'not in PATH')"
        echo "  - Python3 version: $(python3 --version 2>/dev/null || echo 'not in PATH')"
        echo "  - UV version: $(uv --version 2>/dev/null || echo 'not in PATH')"
        echo "  - Available environment variables:"
        env | grep -E "(TEST_|DB_|DISABLE_|VITE_)" | sort || echo "No matching env vars"

    - name: Start backend and frontend, run Mobile Chrome E2E tests
      run: |
        # Start backend
        echo "Starting backend for ${{ matrix.test-type }} Mobile Chrome E2E tests..."
        cd backend
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 &
        BACKEND_PID=$!
        echo "Backend started with PID: $BACKEND_PID"

        # Wait for backend
        sleep 8
        for i in {1..5}; do
          if curl -f http://localhost:8000/health; then
            echo "Backend ready for E2E tests"
            break
          else
            echo "Waiting for backend... ($i/5)"
            if [ $i -eq 5 ]; then
              echo "Backend failed to start"
              kill $BACKEND_PID 2>/dev/null || true
              exit 1
            fi
            sleep 2
          fi
        done

        # Start frontend
        cd ../frontend
        npm run dev &
        FRONTEND_PID=$!
        echo "Frontend started with PID: $FRONTEND_PID"

        # Wait for frontend
        sleep 15

        # Run mobile Chrome tests
        if [ "${{ matrix.test-type }}" = "demo" ]; then
          echo "Running demo Mobile Chrome E2E tests: @core|@demo-content|@demo-ui|@mobile-only (excluding @desktop-only and @auth)"
          CI_TEST_TYPE=demo npx playwright test --grep "(@core|@demo-content|@demo-ui|@mobile-only)(?!.*@desktop-only)(?!.*@auth)" --project="Mobile Chrome" --reporter=github
        else
          echo "Running auth Mobile Chrome E2E tests: @auth[^-]|@auth-flows (excluding @desktop-only)"
          CI_TEST_TYPE=auth npx playwright test --grep "(@auth[^-]|@auth-flows)(?!.*@desktop-only)" --project="Mobile Chrome" --reporter=github
        fi
        TEST_EXIT_CODE=$?

        # Cleanup
        echo "Cleaning up processes..."
        kill $FRONTEND_PID 2>/dev/null || true
        kill $BACKEND_PID 2>/dev/null || true
        exit $TEST_EXIT_CODE

  e2e-mobile-firefox:
    needs: [e2e-desktop-firefox]
    continue-on-error: true  # Allow this job to fail
    strategy:
      fail-fast: false
      matrix:
        test-type: [demo, auth]
    runs-on: ubuntu-latest
    env:
      DB_URL_LOCAL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
      DB_URL_PROD: postgresql+asyncpg://postgres:postgres@localhost:5432/test_aris
      ALEMBIC_DB_URL_LOCAL: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
      ALEMBIC_DB_URL_PROD: postgresql+psycopg2://postgres:postgres@localhost:5432/test_aris
      JWT_SECRET_KEY: test_secret_key_for_ci_environment_32_chars_minimum
      TEST_USER_EMAIL: testuser@aris.pub
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      VITE_LOG_LEVEL: WARN
      VITE_API_BASE_URL: http://localhost:8000

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aris
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.13

    - name: Wait for PostgreSQL to be ready
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
        echo "PostgreSQL is ready!"

    - name: Create virtual environment and sync dependencies
      working-directory: backend
      run: |
        uv venv
        uv sync --group test --group dev

    - name: Run database migrations
      working-directory: backend
      run: |
        uv run alembic upgrade head
        ${{ matrix.test-type == 'auth' && 'uv run python scripts/reset_test_user.py' || '' }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: playwright-browsers-${{ runner.os }}-mobile-firefox

    - name: Install Playwright browsers
      working-directory: frontend
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install firefox --with-deps

    - name: Start backend and frontend, run Mobile Firefox E2E tests
      run: |
        # Start backend
        echo "Starting backend for ${{ matrix.test-type }} Mobile Firefox E2E tests..."
        cd backend
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 &
        BACKEND_PID=$!
        echo "Backend started with PID: $BACKEND_PID"

        # Wait for backend
        sleep 8
        for i in {1..5}; do
          if curl -f http://localhost:8000/health; then
            echo "Backend ready for E2E tests"
            break
          else
            echo "Waiting for backend... ($i/5)"
            if [ $i -eq 5 ]; then
              echo "Backend failed to start"
              kill $BACKEND_PID 2>/dev/null || true
              exit 1
            fi
            sleep 2
          fi
        done

        # Start frontend
        cd ../frontend
        npm run dev &
        FRONTEND_PID=$!
        echo "Frontend started with PID: $FRONTEND_PID"

        # Wait for frontend
        sleep 15

        # Run mobile Firefox tests
        if [ "${{ matrix.test-type }}" = "demo" ]; then
          echo "Running demo Mobile Firefox E2E tests: @core|@demo-content|@demo-ui|@mobile-only (excluding @desktop-only)"
          CI_TEST_TYPE=demo npx playwright test --grep "(@core|@demo-content|@demo-ui|@mobile-only)(?!.*@desktop-only)" --project="Mobile Firefox" --reporter=github
        else
          echo "Running auth Mobile Firefox E2E tests: @auth[^-]|@auth-flows (excluding @desktop-only)"
          CI_TEST_TYPE=auth npx playwright test --grep "(@auth[^-]|@auth-flows)(?!.*@desktop-only)" --project="Mobile Firefox" --reporter=github
        fi
        TEST_EXIT_CODE=$?

        # Cleanup
        echo "Cleaning up processes..."
        kill $FRONTEND_PID 2>/dev/null || true
        kill $BACKEND_PID 2>/dev/null || true
        exit $TEST_EXIT_CODE

  e2e-mobile-safari:
    needs: [e2e-desktop-safari]
    continue-on-error: true  # Allow this job to fail
    strategy:
      fail-fast: false
      matrix:
        test-type: [demo, auth]
    runs-on: macos-latest
    env:
      TEST_USER_EMAIL: testuser@aris.pub
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      VITE_LOG_LEVEL: WARN
      COPILOT_PROVIDER: mock

    steps:
    - uses: actions/checkout@v4

    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install uv
      run: pip install uv

    - name: Setup PostgreSQL
      run: |
        brew install postgresql
        brew services start postgresql
        # Wait for PostgreSQL to be ready
        for i in {1..30}; do
          if pg_isready -q; then
            echo "PostgreSQL is ready!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "PostgreSQL failed to start"
            exit 1
          fi
          sleep 2
        done
        # Create postgres user with password to match global DB URLs
        createuser -s postgres
        psql -d postgres -c "ALTER USER postgres PASSWORD 'postgres';"
        createdb test_aris

    - name: Create virtual environment and sync dependencies
      working-directory: backend
      run: |
        uv venv
        uv sync --group test --group dev

    - name: Run database migrations and setup test user (with debugging)
      working-directory: backend
      run: |
        echo "🔍 [DEBUG] Starting database setup for test-type: ${{ matrix.test-type }}"
        echo "🔍 [DEBUG] Environment variables:"
        echo "  - TEST_USER_EMAIL: ${TEST_USER_EMAIL:-UNSET}"
        echo "  - TEST_USER_PASSWORD length: ${#TEST_USER_PASSWORD}"
        echo "  - DB_URL_LOCAL: ${DB_URL_LOCAL:-UNSET}"
        echo "  - PostgreSQL connection test:"

        # Test database connectivity
        if pg_isready -q; then
          echo "✅ PostgreSQL connection successful"
        else
          echo "❌ PostgreSQL connection failed"
          exit 1
        fi

        # Run migrations
        echo "🔄 Running database migrations..."
        uv run alembic upgrade head
        MIGRATION_EXIT_CODE=$?
        echo "📊 Migration exit code: $MIGRATION_EXIT_CODE"

        # Setup test user for enabled auth mode
        if [ "${{ matrix.test-type }}" = "auth" ]; then
          echo "🔑 Auth tests - creating test user..."
          echo "📧 Creating test user: ${TEST_USER_EMAIL}"
          uv run python scripts/reset_test_user.py
          RESET_USER_EXIT_CODE=$?
          echo "📊 Reset test user exit code: $RESET_USER_EXIT_CODE"

          if [ $RESET_USER_EXIT_CODE -eq 0 ]; then
            echo "✅ Test user creation/reset completed successfully"
          else
            echo "❌ Test user creation/reset FAILED with exit code: $RESET_USER_EXIT_CODE"
            exit $RESET_USER_EXIT_CODE
          fi
        else
          echo "🔓 Demo tests - skipping test user creation"
        fi

        echo "✅ [DEBUG] Database setup completed for ${{ matrix.test-type }} tests"

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/Library/Caches/ms-playwright
        key: playwright-browsers-${{ runner.os }}-mobile-safari

    - name: Install Playwright browsers
      working-directory: frontend
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install webkit

    - name: Platform-specific environment debugging
      run: |
        echo "🔍 [PLATFORM-DEBUG] Platform debugging for macOS:"
        echo "  - Runner OS: $RUNNER_OS"
        echo "  - OS Name: $(uname -s)"
        echo "  - OS Version: $(uname -r)"
        echo "  - Architecture: $(uname -m)"
        echo "  - PostgreSQL version: $(postgres --version 2>/dev/null || echo 'not in PATH')"
        echo "  - Python version: $(python --version 2>/dev/null || echo 'not in PATH')"
        echo "  - Python3 version: $(python3 --version 2>/dev/null || echo 'not in PATH')"
        echo "  - UV version: $(uv --version 2>/dev/null || echo 'not in PATH')"
        echo "  - Brew info: $(brew --version 2>/dev/null || echo 'not in PATH')"
        echo "  - Available environment variables:"
        env | grep -E "(TEST_|DB_|DISABLE_|VITE_)" | sort || echo "No matching env vars"

    - name: Start backend and frontend, run Mobile Safari E2E tests
      run: |
        # Start backend
        echo "Starting backend for ${{ matrix.test-type }} Mobile Safari E2E tests..."
        cd backend
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 &
        BACKEND_PID=$!
        echo "Backend started with PID: $BACKEND_PID"

        # Wait for backend
        sleep 8
        for i in {1..5}; do
          if curl -f http://localhost:8000/health; then
            echo "Backend ready for E2E tests"
            break
          else
            echo "Waiting for backend... ($i/5)"
            if [ $i -eq 5 ]; then
              echo "Backend failed to start"
              kill $BACKEND_PID 2>/dev/null || true
              exit 1
            fi
            sleep 2
          fi
        done

        # Start frontend
        cd ../frontend
        npm run dev &
        FRONTEND_PID=$!
        echo "Frontend started with PID: $FRONTEND_PID"

        # Wait for frontend
        sleep 15

        # Run mobile Safari tests
        if [ "${{ matrix.test-type }}" = "demo" ]; then
          echo "Running demo Mobile Safari E2E tests: @core|@demo-content|@demo-ui|@mobile-only (excluding @desktop-only and @auth)"
          CI_TEST_TYPE=demo npx playwright test --grep "(@core|@demo-content|@demo-ui|@mobile-only)(?!.*@desktop-only)(?!.*@auth)" --project="Mobile Safari" --reporter=github
        else
          echo "Running auth Mobile Safari E2E tests: @auth[^-]|@auth-flows (excluding @desktop-only)"
          CI_TEST_TYPE=auth npx playwright test --grep "(@auth[^-]|@auth-flows)(?!.*@desktop-only)" --project="Mobile Safari" --reporter=github
        fi
        TEST_EXIT_CODE=$?

        # Cleanup
        echo "Cleaning up processes..."
        kill $FRONTEND_PID 2>/dev/null || true
        kill $BACKEND_PID 2>/dev/null || true
        exit $TEST_EXIT_CODE


# Trigger CI
