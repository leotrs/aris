name: CI

# TEMPORARY: All jobs run always for CI debugging
# TODO: Restore path filtering after debugging is complete
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      site: ${{ steps.changes.outputs.site }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
            site:
              - 'site/**'

  backend-test:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ always() }}
    env:
      ENV: CI
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aris
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    defaults:
      run:
        working-directory: backend

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Create virtual environment
      run: uv venv

    - name: Set up Python
      run: uv python install 3.13

    - name: Sync dependencies
      run: uv sync --group test

    - name: Run linting (ruff)
      run: uv run ruff check

    - name: Wait for PostgreSQL to be ready
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        echo "PostgreSQL is ready!"

    - name: Test PostgreSQL connection
      run: |
        echo "Testing PostgreSQL connection..."
        psql -h localhost -p 5432 -U postgres -d test_aris -c "SELECT version();"
      env:
        PGPASSWORD: postgres

    - name: Debug env & .env.ci file
      run: |
        echo "ENV=$ENV"
        echo "TEST_USER_PASSWORD is set: $([ -n "$TEST_USER_PASSWORD" ] && echo "yes" || echo "no")"
        echo "GITHUB_ACTIONS=$GITHUB_ACTIONS"
        ls -l .env.ci
        cat .env.ci

    - name: Run tests
      run: uv run pytest -n8 --cov=aris --cov-report=xml


    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: ./backend/coverage.xml
        flags: backend
        token: ${{ secrets.CODECOV_TOKEN }}

  frontend-test:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ always() }}

    defaults:
      run:
        working-directory: frontend

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Check for missing packages
      run: npm ls --depth=0

    - name: Run linting
      run: npm run lint

    - name: Run unit tests with coverage
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: ./frontend/coverage/lcov.info
        flags: frontend
        token: ${{ secrets.CODECOV_TOKEN }}

  site-test:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ always() }}

    defaults:
      run:
        working-directory: site

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: site/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Check for missing packages
      run: npm ls --depth=0

    - name: Run linting
      run: npm run lint

    - name: Run unit tests
      run: npm run test:run

  site-e2e:
    runs-on: ubuntu-latest
    needs: [changes, site-test]
    if: ${{ always() && (needs.site-test.result == 'success' || needs.site-test.result == 'skipped') }}

    defaults:
      run:
        working-directory: site

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: site/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-site-${{ hashFiles('site/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-site-

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Start marketing site server
      run: |
        echo "Starting marketing site server..."
        npm run dev -- --host 0.0.0.0 --port 3000 > site.log 2>&1 &
        echo $! > site.pid
        echo "Marketing site server started with PID $(cat site.pid)"

    - name: Wait for marketing site to be ready
      run: |
        echo "Waiting for marketing site server..."
        timeout 90 bash -c 'until curl -f http://localhost:3000; do echo "Marketing site not ready, waiting..."; sleep 3; done'
        echo "Marketing site server is ready!"

    - name: Run Site E2E tests (excluding demo integration)
      run: npm run test:e2e:all -- --grep-invert "demo"

  e2e-auth:
    runs-on: ubuntu-latest
    needs: [changes, backend-test, frontend-test, site-test]
    if: ${{ always() && (needs.backend-test.result == 'success' || needs.backend-test.result == 'skipped') && (needs.frontend-test.result == 'success' || needs.frontend-test.result == 'skipped') && (needs.site-test.result == 'success' || needs.site-test.result == 'skipped') }}
    env:
      ENV: CI
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aris
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    # Backend setup
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.13

    - name: Setup backend
      working-directory: backend
      run: |
        uv venv
        uv sync --all-groups
        uv pip install -e .

    - name: Setup database and test data
      working-directory: backend
      run: |
        uv run alembic upgrade head
        uv run python scripts/reset_test_user.py
      env:
        SKIP_AUTH_FOR_TESTS: true

    # Frontend setup
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    - name: Install Playwright browsers
      working-directory: frontend
      run: npx playwright install --with-deps

    # Start servers
    - name: Start backend server
      working-directory: backend
      run: |
        echo "Starting backend server with auth enabled..."
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 > backend.log 2>&1 &
        echo $! > backend.pid
        echo "Backend server started with PID $(cat backend.pid)"

    - name: Start frontend server
      working-directory: frontend
      run: |
        echo "Starting frontend server..."
        npm run dev -- --host 0.0.0.0 --port 5173 > frontend.log 2>&1 &
        echo $! > frontend.pid
        echo "Frontend server started with PID $(cat frontend.pid)"
      env:
        VITE_DEV_LOGIN_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
        VITE_API_BASE_URL: http://localhost:8000

    - name: Wait for servers to be ready
      run: |
        echo "Waiting for backend server..."
        timeout 90 bash -c 'until curl -f http://localhost:8000/health; do echo "Backend not ready, waiting..."; sleep 3; done'
        echo "Backend server is ready!"

        echo "Waiting for frontend server..."
        timeout 90 bash -c 'until curl -f http://localhost:5173; do echo "Frontend not ready, waiting..."; sleep 3; done'
        echo "Frontend server is ready!"

    - name: Run Authentication E2E tests
      working-directory: frontend
      run: npm run test:e2e -- --grep "@auth"
      env:
        VITE_DEV_LOGIN_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
        VITE_API_BASE_URL: http://localhost:8000
        TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

  e2e-demo:
    runs-on: ubuntu-latest
    needs: [changes, backend-test, frontend-test, site-test]
    if: ${{ always() && (needs.backend-test.result == 'success' || needs.backend-test.result == 'skipped') && (needs.frontend-test.result == 'success' || needs.frontend-test.result == 'skipped') && (needs.site-test.result == 'success' || needs.site-test.result == 'skipped') }}
    env:
      ENV: CI
      SKIP_AUTH_FOR_TESTS: true

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aris
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    # Backend setup
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.13

    - name: Setup backend
      working-directory: backend
      run: |
        uv venv
        uv sync --all-groups
        uv pip install -e .

    - name: Setup database and test data
      working-directory: backend
      run: |
        uv run alembic upgrade head
        uv run python scripts/reset_test_user.py
      env:
        SKIP_AUTH_FOR_TESTS: true

    # Frontend setup
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    - name: Install Playwright browsers
      working-directory: frontend
      run: npx playwright install --with-deps

    # Start servers
    - name: Start backend server
      working-directory: backend
      run: |
        echo "Starting backend server with auth disabled..."
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 > backend.log 2>&1 &
        echo $! > backend.pid
        echo "Backend server started with PID $(cat backend.pid)"
      env:
        SKIP_AUTH_FOR_TESTS: true

    - name: Start frontend server
      working-directory: frontend
      run: |
        echo "Starting frontend server..."
        npm run dev -- --host 0.0.0.0 --port 5173 > frontend.log 2>&1 &
        echo $! > frontend.pid
        echo "Frontend server started with PID $(cat frontend.pid)"
      env:
        VITE_API_BASE_URL: http://localhost:8000
        VITE_SKIP_AUTH_FOR_TESTS: true

    - name: Wait for servers to be ready
      run: |
        echo "Waiting for backend server..."
        timeout 90 bash -c 'until curl -f http://localhost:8000/health; do echo "Backend not ready, waiting..."; sleep 3; done'
        echo "Backend server is ready!"
        
        echo "Waiting for frontend server..."
        timeout 90 bash -c 'until curl -f http://localhost:5173; do echo "Frontend not ready, waiting..."; sleep 3; done'
        echo "Frontend server is ready!"

    # Site setup for demo integration tests
    - name: Install site dependencies
      working-directory: site
      run: npm ci

    - name: Install site Playwright browsers
      working-directory: site
      run: npx playwright install --with-deps

    - name: Start marketing site server
      working-directory: site
      run: |
        echo "Starting marketing site server..."
        npm run dev -- --host 0.0.0.0 --port 3000 > site.log 2>&1 &
        echo $! > site.pid
        echo "Marketing site server started with PID $(cat site.pid)"

    - name: Wait for marketing site to be ready
      run: |
        echo "Waiting for marketing site server..."
        timeout 90 bash -c 'until curl -f http://localhost:3000; do echo "Marketing site not ready, waiting..."; sleep 3; done'
        echo "Marketing site server is ready!"

    - name: Run Demo E2E tests
      working-directory: frontend
      run: npm run test:e2e -- --grep "@demo"
      env:
        VITE_DEV_LOGIN_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
        VITE_API_BASE_URL: http://localhost:8000
        TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

    - name: Run Site Demo Integration tests
      working-directory: site
      run: npm run test:e2e -- --grep "demo"
      env:
        FRONTEND_URL: http://localhost:5173

  e2e-standard:
    runs-on: ubuntu-latest
    needs: [changes, backend-test, frontend-test, site-test]
    if: ${{ always() && (needs.backend-test.result == 'success' || needs.backend-test.result == 'skipped') && (needs.frontend-test.result == 'success' || needs.frontend-test.result == 'skipped') && (needs.site-test.result == 'success' || needs.site-test.result == 'skipped') }}
    env:
      ENV: CI
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aris
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    # Backend setup
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.13

    - name: Setup backend
      working-directory: backend
      run: |
        uv venv
        uv sync --all-groups
        uv pip install -e .

    - name: Setup database and test data
      working-directory: backend
      run: |
        uv run alembic upgrade head
        uv run python scripts/reset_test_user.py

    # Frontend setup
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    - name: Install Playwright browsers
      working-directory: frontend
      run: npx playwright install --with-deps

    # Start servers
    - name: Start backend server
      working-directory: backend
      run: |
        echo "Starting backend server..."
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 > backend.log 2>&1 &
        echo $! > backend.pid
        echo "Backend server started with PID $(cat backend.pid)"

    - name: Start frontend server
      working-directory: frontend
      run: |
        echo "Starting frontend server..."
        npm run dev -- --host 0.0.0.0 --port 5173 > frontend.log 2>&1 &
        echo $! > frontend.pid
        echo "Frontend server started with PID $(cat frontend.pid)"
      env:
        VITE_DEV_LOGIN_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
        VITE_API_BASE_URL: http://localhost:8000

    - name: Wait for servers to be ready
      run: |
        echo "Waiting for backend server..."
        timeout 90 bash -c 'until curl -f http://localhost:8000/health; do echo "Backend not ready, waiting..."; sleep 3; done'
        echo "Backend server is ready!"
        
        echo "Waiting for frontend server..."
        timeout 90 bash -c 'until curl -f http://localhost:5173; do echo "Frontend not ready, waiting..."; sleep 3; done'
        echo "Frontend server is ready!"

    - name: Run Standard E2E tests (no auth required)
      working-directory: frontend
      run: ../.github/scripts/run-e2e-tests.sh 'npm run test:e2e -- --grep "@standard"'
      env:
        VITE_API_BASE_URL: http://localhost:8000
        VITE_SKIP_AUTH_FOR_TESTS: true
        SKIP_AUTH_FOR_TESTS: true

  e2e-uncategorized:
    runs-on: ubuntu-latest
    needs: [changes, backend-test, frontend-test, site-test]
    if: ${{ always() && (needs.backend-test.result == 'success' || needs.backend-test.result == 'skipped') && (needs.frontend-test.result == 'success' || needs.frontend-test.result == 'skipped') && (needs.site-test.result == 'success' || needs.site-test.result == 'skipped') }}
    env:
      ENV: CI
      SKIP_AUTH_FOR_TESTS: true

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aris
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    # Backend setup
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.13

    - name: Setup backend
      working-directory: backend
      run: |
        uv venv
        uv sync --all-groups
        uv pip install -e .

    - name: Setup database and test data
      working-directory: backend
      run: |
        uv run alembic upgrade head
        uv run python scripts/reset_test_user.py
      env:
        SKIP_AUTH_FOR_TESTS: true

    # Frontend setup
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    - name: Install Playwright browsers
      working-directory: frontend
      run: npx playwright install --with-deps

    # Start servers
    - name: Start backend server
      working-directory: backend
      run: |
        echo "Starting backend server with auth disabled..."
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 > backend.log 2>&1 &
        echo $! > backend.pid
        echo "Backend server started with PID $(cat backend.pid)"
      env:
        SKIP_AUTH_FOR_TESTS: true

    - name: Start frontend server
      working-directory: frontend
      run: |
        echo "Starting frontend server..."
        npm run dev -- --host 0.0.0.0 --port 5173 > frontend.log 2>&1 &
        echo $! > frontend.pid
        echo "Frontend server started with PID $(cat frontend.pid)"
      env:
        VITE_API_BASE_URL: http://localhost:8000
        VITE_SKIP_AUTH_FOR_TESTS: true

    - name: Wait for servers to be ready
      run: ./.github/scripts/wait-for-servers.sh

    - name: Run uncategorized E2E tests (no auth required)
      working-directory: frontend
      run: ../.github/scripts/run-e2e-tests.sh 'npm run test:e2e -- --grep-invert "@"'
      env:
        VITE_API_BASE_URL: http://localhost:8000
        VITE_SKIP_AUTH_FOR_TESTS: true
        SKIP_AUTH_FOR_TESTS: true

  e2e-desktop-only:
    runs-on: ubuntu-latest
    needs: [changes, backend-test, frontend-test, site-test]
    if: ${{ always() && (needs.backend-test.result == 'success' || needs.backend-test.result == 'skipped') && (needs.frontend-test.result == 'success' || needs.frontend-test.result == 'skipped') && (needs.site-test.result == 'success' || needs.site-test.result == 'skipped') }}
    env:
      ENV: CI
      SKIP_AUTH_FOR_TESTS: true

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aris
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    # Backend setup
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.13

    - name: Setup backend
      working-directory: backend
      run: |
        uv venv
        uv sync --all-groups
        uv pip install -e .

    - name: Setup database and test data
      working-directory: backend
      run: |
        uv run alembic upgrade head
        uv run python scripts/reset_test_user.py
      env:
        SKIP_AUTH_FOR_TESTS: true

    # Frontend setup
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    # Install only desktop browsers (exclude mobile)
    - name: Install Playwright desktop browsers only
      working-directory: frontend
      run: npx playwright install chromium firefox webkit --with-deps

    # Start servers
    - name: Start backend server
      working-directory: backend
      run: |
        echo "Starting backend server with auth disabled..."
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 > backend.log 2>&1 &
        echo $! > backend.pid
        echo "Backend server started with PID $(cat backend.pid)"
      env:
        SKIP_AUTH_FOR_TESTS: true

    - name: Start frontend server
      working-directory: frontend
      run: |
        echo "Starting frontend server..."
        npm run dev -- --host 0.0.0.0 --port 5173 > frontend.log 2>&1 &
        echo $! > frontend.pid
        echo "Frontend server started with PID $(cat frontend.pid)"
      env:
        VITE_API_BASE_URL: http://localhost:8000
        VITE_SKIP_AUTH_FOR_TESTS: true

    - name: Wait for servers to be ready
      run: ./.github/scripts/wait-for-servers.sh

    - name: Run Desktop-Only E2E tests (no auth required)
      working-directory: frontend
      run: ../.github/scripts/run-e2e-tests.sh 'npm run test:e2e -- --grep "@desktop-only" --project="chromium" --project="firefox" --project="webkit"'
      env:
        VITE_API_BASE_URL: http://localhost:8000
        VITE_SKIP_AUTH_FOR_TESTS: true
        SKIP_AUTH_FOR_TESTS: true
      ENV: CI
      SKIP_AUTH_FOR_TESTS: true

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aris
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    # Backend setup
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.13

    - name: Setup backend
      working-directory: backend
      run: |
        uv venv
        uv sync --all-groups
        uv pip install -e .

    - name: Setup database and test data
      working-directory: backend
      run: |
        uv run alembic upgrade head
        uv run python scripts/reset_test_user.py
      env:
        SKIP_AUTH_FOR_TESTS: true

    # Frontend setup
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    - name: Install Playwright browsers
      working-directory: frontend
      run: npx playwright install --with-deps

    # Start servers
    - name: Start backend server
      working-directory: backend
      run: |
        echo "Starting backend server with auth disabled..."
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 > backend.log 2>&1 &
        echo $! > backend.pid
        echo "Backend server started with PID $(cat backend.pid)"
      env:
        SKIP_AUTH_FOR_TESTS: true

    - name: Start frontend server
      working-directory: frontend
      run: |
        echo "Starting frontend server..."
        npm run dev -- --host 0.0.0.0 --port 5173 > frontend.log 2>&1 &
        echo $! > frontend.pid
        echo "Frontend server started with PID $(cat frontend.pid)"
      env:
        VITE_API_BASE_URL: http://localhost:8000
        VITE_SKIP_AUTH_FOR_TESTS: true

    - name: Wait for servers to be ready
      run: ./.github/scripts/wait-for-servers.sh

    - name: Run uncategorized E2E tests (no auth required)
      working-directory: frontend
      run: ../.github/scripts/run-e2e-tests.sh 'npm run test:e2e -- --grep-invert "@"'
      env:
        VITE_API_BASE_URL: http://localhost:8000
        VITE_SKIP_AUTH_FOR_TESTS: true
        SKIP_AUTH_FOR_TESTS: true

  e2e-desktop-only:
    runs-on: ubuntu-latest
    needs: [changes, backend-test, frontend-test, site-test]
    if: ${{ always() && (needs.backend-test.result == 'success' || needs.backend-test.result == 'skipped') && (needs.frontend-test.result == 'success' || needs.frontend-test.result == 'skipped') && (needs.site-test.result == 'success' || needs.site-test.result == 'skipped') }}
    env:
      ENV: CI
      SKIP_AUTH_FOR_TESTS: true

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aris
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    # Backend setup
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.13

    - name: Setup backend
      working-directory: backend
      run: |
        uv venv
        uv sync --all-groups
        uv pip install -e .

    - name: Setup database and test data
      working-directory: backend
      run: |
        uv run alembic upgrade head
        uv run python scripts/reset_test_user.py
      env:
        SKIP_AUTH_FOR_TESTS: true

    # Frontend setup
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    # Install only desktop browsers (exclude mobile)
    - name: Install Playwright desktop browsers only
      working-directory: frontend
      run: npx playwright install chromium firefox webkit --with-deps

    # Start servers
    - name: Start backend server
      working-directory: backend
      run: |
        echo "Starting backend server with auth disabled..."
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 > backend.log 2>&1 &
        echo $! > backend.pid
        echo "Backend server started with PID $(cat backend.pid)"
      env:
        SKIP_AUTH_FOR_TESTS: true

    - name: Start frontend server
      working-directory: frontend
      run: |
        echo "Starting frontend server..."
        npm run dev -- --host 0.0.0.0 --port 5173 > frontend.log 2>&1 &
        echo $! > frontend.pid
        echo "Frontend server started with PID $(cat frontend.pid)"
      env:
        VITE_API_BASE_URL: http://localhost:8000
        VITE_SKIP_AUTH_FOR_TESTS: true

    - name: Wait for servers to be ready
      run: ./.github/scripts/wait-for-servers.sh

    - name: Run Desktop-Only E2E tests (no auth required)
      working-directory: frontend
      run: ../.github/scripts/run-e2e-tests.sh 'npm run test:e2e -- --grep "@desktop-only" --project="chromium" --project="firefox" --project="webkit"'
      env:
        VITE_API_BASE_URL: http://localhost:8000
        VITE_SKIP_AUTH_FOR_TESTS: true
        SKIP_AUTH_FOR_TESTS: true
