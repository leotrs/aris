# Multi-stage build for backend service
FROM python:3.13-slim AS base

# Install system dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        postgresql-client \
        curl \
        && rm -rf /var/lib/apt/lists/* \
        && apt-get clean

# Install uv
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

WORKDIR /app

# Copy dependency files first for optimal layer caching
COPY backend/pyproject.toml backend/uv.lock ./

# Install production dependencies with cache
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-dev

# Development stage with all dependencies
FROM base AS dev

# Copy env-check script and .env file
COPY docker/env-check.js ../docker/env-check.js
COPY .env ../.env

# Install all dependencies including dev dependencies with cache
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --all-groups --frozen

# Set up environment
ENV PATH="/app/.venv/bin:$PATH"
ENV PYTHONPATH="/app"

# Note: Design assets are mounted as volume in dev mode via docker-compose
# For production builds, they would be copied here

# Copy entrypoint script and seed data
COPY docker/backend/docker-entrypoint.sh /usr/local/bin/
COPY docker/backend/seed_user.sql /usr/local/share/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# Expose port
EXPOSE 8000

# Set entrypoint
ENTRYPOINT ["docker-entrypoint.sh"]

# Default development server command (can be overridden in docker-compose)
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]