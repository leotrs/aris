#!/bin/bash
# CI Simulation Runner (Example Template)
# Copy this to 'simulate-ci' and fill in your actual secret values
# Usage: ./simulate-ci -- <command>
# Example: ./simulate-ci -- uv run pytest -n8

# Parse arguments - everything after "--" is the command
if [[ "$1" != "--" ]]; then
    echo "Usage: $0 -- <command>"
    echo "Example: $0 -- uv run pytest -n8"
    exit 1
fi

shift # Remove the "--"
COMMAND="$@"

if [[ -z "$COMMAND" ]]; then
    echo "Error: No command provided"
    echo "Usage: $0 -- <command>"
    exit 1
fi

# Set CI environment
export ENV=CI
export CI=true
export JWT_SECRET_KEY=your_jwt_secret_key_here
export JWT_ALGORITHM=HS256
export JWT_ACCESS_TOKEN_EXPIRE_MINUTES=1440
export DB_URL_PROD=postgresql+asyncpg://your_db_user:your_db_password@localhost:5432/test_aris
export DB_URL_LOCAL=postgresql+asyncpg://your_db_user:your_db_password@localhost:5432/test_aris
export ALEMBIC_DB_URL_LOCAL=postgresql+psycopg2://your_db_user:your_db_password@localhost:5432/test_aris
export ALEMBIC_DB_URL_PROD=postgresql+psycopg2://your_db_user:your_db_password@localhost:5432/test_aris
export TEST_USER_EMAIL=testuser@aris.pub
export TEST_USER_PASSWORD=your_test_user_password_here

echo "ðŸš€ Running in CI simulation mode: $COMMAND"

# Run the command and capture exit code
$COMMAND
EXIT_CODE=$?

# Cleanup function (runs on script exit)
cleanup() {
    # Unset CI variables
    unset ENV CI JWT_SECRET_KEY JWT_ALGORITHM JWT_ACCESS_TOKEN_EXPIRE_MINUTES
    unset DB_URL_PROD DB_URL_LOCAL ALEMBIC_DB_URL_LOCAL ALEMBIC_DB_URL_PROD
    unset TEST_USER_EMAIL TEST_USER_PASSWORD
    echo "ðŸ”„ CI simulation deactivated"
}

# Set cleanup to run on script exit
trap cleanup EXIT

# Exit with the same code as the command
exit $EXIT_CODE